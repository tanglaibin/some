package huawei.webquestion.services;

import huawei.webquestion.dao.Dao;
import huawei.webquestion.dao.Defect;
import huawei.webquestion.dao.DefectDAO;
import huawei.webquestion.dao.DirDepartment;
import huawei.webquestion.dao.DirDepartmentDAO;
import huawei.webquestion.dao.DirPatchdecisionDAO;
import huawei.webquestion.dao.DirPatchreleasetypeDAO;
import huawei.webquestion.dao.DirPatchstatus;
import huawei.webquestion.dao.DirPatchstatusDAO;
import huawei.webquestion.dao.DirStatus;
import huawei.webquestion.dao.DirStatusDAO;
import huawei.webquestion.dao.DirVersion;
import huawei.webquestion.dao.DirVersionDAO;
import huawei.webquestion.dao.ParametersDAO;
import huawei.webquestion.dao.Patch;
import huawei.webquestion.dao.PatchDAO;
import huawei.webquestion.dao.PatchMeasureHistory;
import huawei.webquestion.dao.PatchMeasureHistoryDAO;
import huawei.webquestion.dao.PatchPlan;
import huawei.webquestion.dao.PatchPlanDAO;
import huawei.webquestion.dao.PatchRequirementDefectSource;
import huawei.webquestion.dao.PatchRequirementDefectSourceDAO;
import huawei.webquestion.dao.PatchRequirementVersion;
import huawei.webquestion.dao.PatchRequirementVersionDAO;
import huawei.webquestion.dao.Patchrequirement;
import huawei.webquestion.dao.PatchrequirementDAO;
import huawei.webquestion.dao.Product;
import huawei.webquestion.dao.ProductDAO;
import huawei.webquestion.dao.Reqmodifylog;
import huawei.webquestion.dao.ReqmodifylogDAO;
import huawei.webquestion.dao.SeReviewRecord;
import huawei.webquestion.dao.SeReviewRecordDAO;
import huawei.webquestion.dao.SiteDAO;
import huawei.webquestion.dao.User;
import huawei.webquestion.dao.UserDAO;
import huawei.webquestion.dao.VrpLmtDAO;
import huawei.webquestion.mail.MailSenderInfo;
import huawei.webquestion.mail.SimpleMailSender;
import huawei.webquestion.pojo.DefectVO;
import huawei.webquestion.pojo.PatchExVO;
import huawei.webquestion.pojo.PatchStatisticResult;
import huawei.webquestion.pojo.PatchVO;
import huawei.webquestion.pojo.PatchVOPlus;
import huawei.webquestion.pojo.VersionRequirementStatVO;
import huawei.webquestion.utility.Constant;
import huawei.webquestion.utility.FileControl;
import huawei.webquestion.utility.WebConfigUtils;

import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.io.PrintStream;
import java.net.URL;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.sql.DataSource;

import jxl.Workbook;
import jxl.format.Alignment;
import jxl.format.UnderlineStyle;
import jxl.format.VerticalAlignment;
import jxl.write.Border;
import jxl.write.BorderLineStyle;
import jxl.write.Label;
import jxl.write.Number;
import jxl.write.WritableCellFormat;
import jxl.write.WritableFont;
import jxl.write.WritableHyperlink;
import jxl.write.WritableSheet;
import jxl.write.WritableWorkbook;
import jxl.write.WriteException;

import org.apache.commons.lang.StringUtils;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.dom4j.Document;
import org.dom4j.Element;
//import org.eclipse.jdt.internal.compiler.lookup.ProblemPackageBinding;
import org.hibernate.Query;

public class PatchService
{
    private static final Log log = LogFactory.getLog(PatchService.class);

    private static final int TO_BE_RULED_TYPE = 2;

    private static final int TO_BE_PLANED_TYPE = 3;

    private static final int PLANED_TYPE = 5;

    private static final int RELEASED_TYPE = 6;

    private ProductDAO productDAO;

    private UserDAO userDAO;

    private PatchDAO patchDAO;

    private PatchPlanDAO patchPlanDAO;

    private DirPatchstatusDAO dirPatchstatusDAO;

    private DirPatchreleasetypeDAO dirPatchreleasetypeDAO;

    private DirVersionDAO dirVersionDAO;

    private PatchrequirementDAO patchrequirementDAO;

    private PatchRequirementVersionDAO patchRequirementVersionDAO;

    private VrpLmtDAO vrpLmtDAO;

    private DirPatchdecisionDAO dirPatchdecisionDAO;

    private DefectDAO defectDAO;

    private DirDepartmentDAO dirDepartmentDAO;

    private SiteDAO siteDAO;

    private DirStatusDAO dirStatusDAO;

    private ParametersDAO parametersDAO;

    private PatchMeasureHistoryDAO patchMeasureHistoryDAO;

    private SeReviewRecordDAO seReviewRecordDAO;

    private ReqmodifylogDAO reqModifyLogDAO;

    private PatchRequirementDefectSourceDAO patchRequirementDefectSourceDAO;

    /**
     * 补丁dao
     */
    private Dao<Patch, Integer> hibernateDao;

    public Dao<Patch, Integer> getHibernateDao()
    {
        return hibernateDao;
    }

    public void setHibernateDao(Dao<Patch, Integer> hibernateDao)
    {
        this.hibernateDao = hibernateDao;
    }

    public SeReviewRecordDAO getSeReviewRecordDAO()
    {
        return seReviewRecordDAO;
    }

    public void setSeReviewRecordDAO(SeReviewRecordDAO seReviewRecordDAO)
    {
        this.seReviewRecordDAO = seReviewRecordDAO;
    }

    public ReqmodifylogDAO getReqModifyLogDAO()
    {
        return reqModifyLogDAO;
    }

    public void setReqModifyLogDAO(ReqmodifylogDAO reqModifyLogDAO)
    {
        this.reqModifyLogDAO = reqModifyLogDAO;
    }

    public VrpLmtDAO getVrpLmtDAO()
    {
        return vrpLmtDAO;
    }

    public void setVrpLmtDAO(VrpLmtDAO vrpLmtDAO)
    {
        this.vrpLmtDAO = vrpLmtDAO;
    }

    public PatchRequirementVersionDAO getPatchRequirementVersionDAO()
    {
        return patchRequirementVersionDAO;
    }

    public void setPatchRequirementVersionDAO(PatchRequirementVersionDAO patchRequirementVersionDAO)
    {
        this.patchRequirementVersionDAO = patchRequirementVersionDAO;
    }

    // 复制已发布的补丁到版本表
    public Integer copyPatchToVersion(Patch patch)
    {
        DirVersion dirVersion = new DirVersion();
        dirVersion.setName(patch.getPatchVersion());
        dirVersion.setProduct(patch.getProduct());
        dirVersion.setBrief(patch.getPatchVersionBrief());
        dirVersion.setDevice(0);
        dirVersion.setIspatch(1);
        dirVersionDAO.save(dirVersion);
        return dirVersion.getId();
    }

    // 设置相关问题单的解决版本为此版本
    @SuppressWarnings("unchecked")
    public List setSolveVersion(Integer versionId, Integer patchId)
    {
        List list = new ArrayList();

        list = getAllDefectList(patchId);
        if ((list != null) && (list.size() > 0))
        {
            for (int i = 0; i < list.size(); i++)
            {
                Defect defect = new Defect();
                defect = (Defect)list.get(i);
                defect.setSolveVersion(versionId);
                // 更新问题单的解决版本
                defectDAO.getHibernateTemplate().update(defect);
            }
        }
        return list;
    }

    // 取得补丁表
    @SuppressWarnings("unchecked")
    public List getPatchList(Integer productId)
    {
        List list = new ArrayList();
        if (productId != null)
        {
            list = this.patchDAO.findByProduct(productId);
        }
        return list;
    }

    // 取得版本表
    @SuppressWarnings("unchecked")
    public List getVersionList(Integer productId)
    {
        List list = new ArrayList();
        if (productId != null)
        {
            list = this.dirVersionDAO.getVersionList(productId);
        }
        return list;
    }

    private Map<Integer, String> productIdNameMapping;

    private String getProductNameById(Integer productId)
    {
        if (this.productIdNameMapping == null)
        {
            this.productIdNameMapping = new HashMap<Integer, String>();
            List<Product> productList = this.productDAO.findAll();
            for (Product p : productList)
            {
                this.productIdNameMapping.put(p.getProductId(), p.getProductName());
            }
        }
        return this.productIdNameMapping.get(productId);
    }

    // 查询需求开始
    @SuppressWarnings("unchecked")
    // 0606
    public List<PatchVO> searchRequirement(String title, String product, String patch, String NPMSNumber, String CMMNumber, String modifier, String decisionVersion, String department,
        String involvedBoard, String involvedVersion, String involvedSite, String decisionMaker, String decisionResult, Integer qstatus, Integer qproduct, String qVersion, String siteAttent,
        String questionStartDate, String questionEndDate, String requirementStartDate, String requirementEndDate, int pageSize, int pageNow, String orderBy, String orderSeq, boolean flag,
        Integer qschemeReviewStatu, String module, String tester, String maintenance, String priority, String isputin, String siteSafety, String iterativePeriod, String budingMaker, String budingNo,
        String budingType, String quesVersion, String patchQuestiontester)
        throws SQLException
    {
        List retList = new ArrayList();
        String modifieridstr = new String();
        if ((modifier != null) && !modifier.equals(""))
        {
            modifieridstr = this.userDAO.getUserIdStringByNameString(modifier);
        }
        String decisionMakeridstr = new String();
        if ((decisionMaker != null) && !decisionMaker.equals(""))
        {
            decisionMakeridstr = this.userDAO.getUserIdStringByNameString(decisionMaker);
        }

        // 需要修改此接口，改为获取老数据
        // 0606
        List list =
            this.patchDAO.searchRequirement(title, product, patch, NPMSNumber, CMMNumber, modifieridstr, decisionVersion, department, involvedBoard, involvedVersion, involvedSite, decisionMakeridstr,
                decisionResult, qstatus, qproduct, qVersion, siteAttent, questionStartDate, questionEndDate, requirementStartDate, requirementEndDate, pageSize, pageNow, orderBy, orderSeq, flag,
                qschemeReviewStatu, module, tester, maintenance, priority, isputin, siteSafety, iterativePeriod, budingMaker, budingNo, budingType, quesVersion, patchQuestiontester);

        // 除此之外还要从新平台中获取数据 如果 qproduct 和 qVersion有数据的话，还要从新平台中获取数据
        List<PatchExVO> newRequirementList =
            this.patchDAO.searchRequirementWithoutVersion(title, product, patch, NPMSNumber, CMMNumber, modifieridstr, decisionVersion, department, involvedBoard, involvedVersion, involvedSite,
                decisionMakeridstr, decisionResult, qstatus, qproduct, qVersion, siteAttent, questionStartDate, questionEndDate, requirementStartDate, requirementEndDate, pageSize, pageNow, orderBy,
                orderSeq, flag, qschemeReviewStatu, module, tester, maintenance, priority, isputin, siteSafety, iterativePeriod, budingMaker, budingNo, budingType, quesVersion);

        addNewRequirement(list, newRequirementList, qVersion, qproduct);
        //
        // for (PatchExVO o : newRequirementList)
        // {
        // Integer verId = o.getVerId();
        // if (verId != null)
        // {
        // //先从新库中获取版本数据
        // DirVersion versionVO = this.getVrpLmtDAO().getVersionInfoById(verId);
        // //如果该版本还存在
        // if (versionVO != null)
        // {
        // o.setQversionname(versionVO.getName());
        //
        // //如果要搜索的产品 且版本为空 则直接的添加到结果集中
        // if (qproduct == null && StringUtils.isEmpty(qVersion))
        // {
        // list.add(o);
        // }
        // else
        // {
        // //产品和r版本 至少有一个不为空，则按照不为空的进行判断是否满足条件
        // boolean isStatisfyVersion = true;
        // //r版本不为空，则按照r版本是否满足进行判断
        // if (StringUtils.isNotEmpty(qVersion))
        // {
        // if (!StringUtils.equalsIgnoreCase(qVersion, versionVO.getBrief()))
        // {
        // isStatisfyVersion = false;
        // }
        // }
        // //如果r版本就不满足，则不再判断产品是否满足了
        // if (isStatisfyVersion && qproduct != null)
        // {
        // String productName = this.getProductNameById(qproduct);
        // //如果产品能够满足条件
        // if (!StringUtils.equalsIgnoreCase(versionVO.getProductName(), productName))
        // {
        // isStatisfyVersion = false;
        // }
        // }
        // //如果都满足则将此条数据加入到最终的结果集中
        // if (isStatisfyVersion)
        // {
        // list.add(o);
        // }
        // }
        // }
        // }
        // }
        //
        //
        // 两个数据进行综合获取所有的数据。。。。

        // sql.append(" limit ");
        // sql.append(pageNow * pageSize - pageSize);
        // sql.append(",");
        // sql.append(pageSize);

        // 如果等于false 则直接返回list 代表是不分页
        if (!flag)
        {
            if (list.size() < 1)
            {
                return null;
            }
            return list;
        }

        // 代表进行分页操作 由于不能使用数据库的分页操作，使用程序分页的方式进行分页处理
        // 在此处实现翻页的操作，不使用数据库的翻页操作 ，可能会造成性能的急剧下降
        if ((list != null) && (list.size() > 0))
        {
            for (int i = pageNow * pageSize - pageSize; i < pageNow * pageSize; i++)
            {
                if (i == list.size())
                {
                    break;
                }
                PatchVO patchVO = (PatchVO)list.get(i);
                updataPatchVO(patchVO);
                retList.add(patchVO);
            }
        }

        if (list.size() < 1)
        {
            retList = null;
        }
        return retList;
    }

    public void updataPatchVO(PatchVO patchVO)
    {

        if ((patchVO.getProduct() != null) && !patchVO.getProduct().equals(""))
        {
            patchVO.setProduct(this.productDAO.getNameById(new Integer(patchVO.getProduct())));
        }
        if ((patchVO.getPatchVersion() != null) && !patchVO.getPatchVersion().equals(""))
        {
            patchVO.setPatchVersion(this.patchDAO.getNameById(new Integer(patchVO.getPatchVersion())));
        }
        if ((patchVO.getModifier() != null) && !patchVO.getModifier().equals(""))
        {
            patchVO.setModifier(this.userDAO.getNameById(new Integer(patchVO.getModifier())));
        }
        if ((patchVO.getDecisionVersion() != null) && !patchVO.getDecisionVersion().equals(""))
        {
            patchVO.setDecisionVersion(this.dirVersionDAO.getNameById(new Integer(patchVO.getDecisionVersion())));
        }
        if ((patchVO.getDecisionResult() != null) && !patchVO.getDecisionResult().equals(""))
        {
            patchVO.setColor(this.dirPatchdecisionDAO.getColorById(new Integer(patchVO.getDecisionResult())));
        }
        if ((patchVO.getDecisionResult() != null) && !patchVO.getDecisionResult().equals(""))
        {
            patchVO.setDecisionResult(this.dirPatchdecisionDAO.getNameById(new Integer(patchVO.getDecisionResult())));
        }

        // if (patchVO.getRequirementVersionSrc() == 1)
        // {
        // //代表是从vrp-lmt中获取的数据，需要调用底层接口转换一下，转换成真实的版本名数据
        // String verName = this.vrpLmtDAO.getValueFromVrplmt("dir_version", "id", patchVO.getVerId() + "", "name");
        // patchVO.setQversionname(verName);
        // }
        if (patchVO.getSchemeReviewStatu() != null)
        {
            patchVO.setSchemeReviewStatuStr(Constant.getSchemeReviewIntegerMap().get(patchVO.getSchemeReviewStatu()));
        }
    }

    public void updataPatchPlan(PatchPlan patchPlan)
    {

        if ((patchPlan.getProduct1() != null) && !patchPlan.getProduct1().equals(""))
        {
            patchPlan.setProduct1(new Integer(patchPlan.getProduct1()));
        }
        if ((patchPlan.getPatchVersion1() != null) && !patchPlan.getPatchVersion1().equals(""))
        {
            patchPlan.setPatchVersion1(patchPlan.getPatchVersion1());
        }
        if ((patchPlan.getNum() != null) && !patchPlan.getNum().equals(""))
        {
            this.patchPlanDAO.findById(patchPlan.getNum());
        }

    }

    // 查询我提交需求
    @SuppressWarnings("unchecked")
    public List searchMyRequirement1(Integer userId, String orderBy, String orderSeq)
        throws SQLException
    {
        List retList = new ArrayList();

        List list = this.patchDAO.searchMyRequirement1(userId, orderBy, orderSeq);
        if ((list != null) && (list.size() > 0))
        {
            for (int i = 0; i < list.size(); i++)
            {
                PatchVO patchVO = new PatchVO();
                patchVO = (PatchVO)list.get(i);
                if ((patchVO.getProduct() != null) && !patchVO.getProduct().equals(""))
                {
                    patchVO.setProduct(this.productDAO.getNameById(new Integer(patchVO.getProduct())));
                }
                if ((patchVO.getPatchVersion() != null) && !patchVO.getPatchVersion().equals(""))
                {
                    patchVO.setPatchVersion(this.patchDAO.getNameById(new Integer(patchVO.getPatchVersion())));
                }
                if ((patchVO.getModifier() != null) && !patchVO.getModifier().equals(""))
                {
                    patchVO.setModifier(this.userDAO.getNameById(new Integer(patchVO.getModifier())));
                }
                if ((patchVO.getDecisionVersion() != null) && !patchVO.getDecisionVersion().equals(""))
                {
                    patchVO.setDecisionVersion(this.dirVersionDAO.getNameById(new Integer(patchVO.getDecisionVersion())));
                }
                if ((patchVO.getDecisionResult() != null) && !patchVO.getDecisionResult().equals(""))
                {
                    patchVO.setColor(this.dirPatchdecisionDAO.getColorById(new Integer(patchVO.getDecisionResult())));
                }
                if ((patchVO.getDecisionResult() != null) && !patchVO.getDecisionResult().equals(""))
                {
                    patchVO.setDecisionResult(this.dirPatchdecisionDAO.getNameById(new Integer(patchVO.getDecisionResult())));
                }
                retList.add(patchVO);
            }
        }
        return retList;
    }

    // 查询我修改需求
    @SuppressWarnings("unchecked")
    public List searchMyRequirement2(Integer userId, String orderBy, String orderSeq)
        throws SQLException
    {
        List retList = new ArrayList();

        List list = this.patchDAO.searchMyRequirement2(userId, orderBy, orderSeq);
        if ((list != null) && (list.size() > 0))
        {
            for (int i = 0; i < list.size(); i++)
            {
                PatchVO patchVO = new PatchVO();
                patchVO = (PatchVO)list.get(i);
                if ((patchVO.getProduct() != null) && !patchVO.getProduct().equals(""))
                {
                    patchVO.setProduct(this.productDAO.getNameById(new Integer(patchVO.getProduct())));
                }
                if ((patchVO.getPatchVersion() != null) && !patchVO.getPatchVersion().equals(""))
                {
                    patchVO.setPatchVersion(this.patchDAO.getNameById(new Integer(patchVO.getPatchVersion())));
                }
                if ((patchVO.getModifier() != null) && !patchVO.getModifier().equals(""))
                {
                    patchVO.setModifier(this.userDAO.getNameById(new Integer(patchVO.getModifier())));
                }
                if ((patchVO.getDecisionVersion() != null) && !patchVO.getDecisionVersion().equals(""))
                {
                    patchVO.setDecisionVersion(this.dirVersionDAO.getNameById(new Integer(patchVO.getDecisionVersion())));
                }
                if ((patchVO.getDecisionResult() != null) && !patchVO.getDecisionResult().equals(""))
                {
                    patchVO.setColor(this.dirPatchdecisionDAO.getColorById(new Integer(patchVO.getDecisionResult())));
                }
                if ((patchVO.getDecisionResult() != null) && !patchVO.getDecisionResult().equals(""))
                {
                    patchVO.setDecisionResult(this.dirPatchdecisionDAO.getNameById(new Integer(patchVO.getDecisionResult())));
                }
                retList.add(patchVO);
            }
        }
        return retList;
    }

    // 查询我审核需求
    @SuppressWarnings("unchecked")
    public List searchMyRequirement3(Integer userId, String orderBy, String orderSeq)
        throws SQLException
    {
        List retList = new ArrayList();

        List list = this.patchDAO.searchMyRequirement3(userId, orderBy, orderSeq);
        if ((list != null) && (list.size() > 0))
        {
            for (int i = 0; i < list.size(); i++)
            {
                PatchVO patchVO = new PatchVO();
                patchVO = (PatchVO)list.get(i);
                if ((patchVO.getProduct() != null) && !patchVO.getProduct().equals(""))
                {
                    patchVO.setProduct(this.productDAO.getNameById(new Integer(patchVO.getProduct())));
                }
                if ((patchVO.getPatchVersion() != null) && !patchVO.getPatchVersion().equals(""))
                {
                    patchVO.setPatchVersion(this.patchDAO.getNameById(new Integer(patchVO.getPatchVersion())));
                }
                if ((patchVO.getModifier() != null) && !patchVO.getModifier().equals(""))
                {
                    patchVO.setModifier(this.userDAO.getNameById(new Integer(patchVO.getModifier())));
                }
                if ((patchVO.getDecisionVersion() != null) && !patchVO.getDecisionVersion().equals(""))
                {
                    patchVO.setDecisionVersion(this.dirVersionDAO.getNameById(new Integer(patchVO.getDecisionVersion())));
                }
                if ((patchVO.getDecisionResult() != null) && !patchVO.getDecisionResult().equals(""))
                {
                    patchVO.setColor(this.dirPatchdecisionDAO.getColorById(new Integer(patchVO.getDecisionResult())));
                }
                if ((patchVO.getDecisionResult() != null) && !patchVO.getDecisionResult().equals(""))
                {
                    patchVO.setDecisionResult(this.dirPatchdecisionDAO.getNameById(new Integer(patchVO.getDecisionResult())));
                }
                retList.add(patchVO);
            }
        }
        return retList;
    }

    // 查看需求时取得问题单列表
    @SuppressWarnings("unchecked")
    public List getDefectList(Integer id)
    {
        List retList = new ArrayList();
        List list = this.defectDAO.findByDemandId(id);
        if ((list != null) && (list.size() > 0))
        {
            for (int i = 0; i < list.size(); i++)
            {
                Defect defect = new Defect();
                DefectVO defectVO = new DefectVO();
                defect = (Defect)list.get(i);
                defectVO.setId(defect.getId());
                defectVO.setGcrms(defect.getGcrms());
                defectVO.setTitle(defect.getTitle());
                defectVO.setVersionName(dirVersionDAO.getNameById(defect.getVersion()));
                if (defect.getExpertPerson() != null)
                {
                    User user = this.userDAO.findById(defect.getExpertPerson());
                    defectVO.setExpertPersonName(user.getFullname());
                }
                if (defect.getAnalysePerson() != null)
                {
                    User user = this.userDAO.findById(defect.getAnalysePerson());
                    defectVO.setAnalysePersonName(user.getFullname());
                }
                if (defect.getStatus() != null)
                {
                    DirStatus dirStatus = this.dirStatusDAO.findById(defect.getStatus());
                    if (dirStatus != null)
                    {
                        defectVO.setStatusName(dirStatus.getName());
                    }
                }
                retList.add(defectVO);
            }
        }
        return retList;
    }

    // 通过补丁Id取得补丁状态
    public String getPatchStatus(Integer id)
    {
        String str = new String();
        Patch patch = this.patchDAO.findById(id);
        if (patch != null)
        {
            DirPatchstatus dirPatchstatus = this.dirPatchstatusDAO.findById(patch.getStatus());
            if (dirPatchstatus != null)
            {
                str = dirPatchstatus.getName();
            }
        }
        return str;
    }

    // 通过补丁Id取得补丁所属产品
    public String getPatchProduct(Integer id)
    {
        String str = new String();
        Patch patch = this.patchDAO.findById(id);
        if (patch != null)
        {
            Product product = this.productDAO.findById(patch.getProduct());
            if (product != null)
            {
                str = product.getProductName();
            }
        }
        return str;
    }

    // 通过需求Id取得补丁名称
    public String getRequirementPatch(Integer id)
    {
        String str = new String();
        Patchrequirement patchrequirement = this.patchrequirementDAO.findById(id);
        if (patchrequirement != null)
        {
            Patch patch = this.patchDAO.findById(patchrequirement.getPatch());
            if (patch != null)
            {
                str = patch.getPatchVersion();
            }
        }
        return str;
    }

    // 通过需求Id取得合入版本名称
    public String getRequirementVersion(Integer id)
    {
        String str = new String();
        Patchrequirement patchrequirement = this.patchrequirementDAO.findById(id);
        if (patchrequirement != null)
        {
            DirVersion version = this.dirVersionDAO.findById(patchrequirement.getDecisionVersion());
            if (version != null)
            {
                str = version.getName();
            }
        }
        return str;
    }

    // 取得补丁下挂的所有问题单列表
    @SuppressWarnings("unchecked")
    public List getAllDefectList(Integer id)
    {
        List list = new ArrayList();

        if (id != null)
        {
            List reqList = patchrequirementDAO.findByPatch(id);
            if ((reqList != null) && (reqList.size() > 0))
            {
                for (int i = 0; i < reqList.size(); i++)
                {
                    Patchrequirement patchrequirement = new Patchrequirement();
                    patchrequirement = (Patchrequirement)reqList.get(i);
                    List queList = defectDAO.findByDemandId(patchrequirement.getId());
                    if ((queList != null) && (queList.size() > 0))
                    {
                        for (int k = 0; k < queList.size(); k++)
                        {
                            Defect defect = new Defect();
                            defect = (Defect)queList.get(k);
                            list.add(defect);
                        }
                    }
                }
            }
        }
        return list;
    }

    private void addNewRequirement(List result, List<PatchExVO> resultWithOutVersion, String qversion, Integer qproduct)
        throws SQLException
    {
        for (PatchExVO o : resultWithOutVersion)
        {
            Integer verId = o.getVerId();
            if (verId != null)
            {
                // 先从新库中获取版本数据
                DirVersion versionVO = this.getVrpLmtDAO().getVersionInfoById(verId);
                // 如果该版本还存在
                if (versionVO != null)
                {
                    o.setQversionname(versionVO.getName());

                    // 如果要搜索的产品 且版本为空 则直接的添加到结果集中
                    if ((qproduct == null) && StringUtils.isEmpty(qversion))
                    {
                        result.add(o);
                    }
                    else
                    {
                        // 产品和r版本 至少有一个不为空，则按照不为空的进行判断是否满足条件
                        boolean isStatisfyVersion = true;
                        // r版本不为空，则按照r版本是否满足进行判断
                        if (StringUtils.isNotEmpty(qversion))
                        {
                            if (!StringUtils.equalsIgnoreCase(qversion, versionVO.getBrief()))
                            {
                                isStatisfyVersion = false;
                            }
                        }
                        // 如果r版本就不满足，则不再判断产品是否满足了
                        if (isStatisfyVersion && (qproduct != null))
                        {
                            String productName = this.getProductNameById(qproduct);
                            // 如果产品能够满足条件
                            if (!StringUtils.equalsIgnoreCase(versionVO.getProductName(), productName))
                            {
                                isStatisfyVersion = false;
                            }
                        }
                        // 如果都满足则将此条数据加入到最终的结果集中
                        if (isStatisfyVersion)
                        {
                            result.add(o);
                        }
                    }
                }
            }
        }

    }

    /**
     * 导出Excel
     * 
     * @return
     * @throws Exception
     */
    @SuppressWarnings({"unchecked"})
    public String getExcelExportList(String title, String product, String patch, String NPMSNumber, String CMMNumber, String modifier, String decisionVersion, String department, String involvedBoard,
        String involvedVersion, String involvedSite, String decisionMaker, String decisionResult, int loginUser, Integer qstatus, Integer qproduct, String qversion, String siteAttent,
        String siteSafety, String isEquipmentAffect, String isEquipmentAffectTxt, String isMaintain, String questionStartDate, String questionEndDate, String requirementStartDate,
        String requirementEndDate, String baseDir, Integer schemeReviewStatu, String module)
        throws Exception
    {

        // String fileName
        String fileName = ExcelService.getPatchExcelFullName(loginUser, baseDir);

        // 问题修改人转换
        if (!"".equals(modifier))
        {
            modifier = modifier.split("/")[1];
            User user = (User)userDAO.findByEmployeeId(modifier).get(0);
            modifier = String.valueOf(user.getUserId());
        }
        // 需求决策人转换
        if (!"".equals(decisionMaker))
        {
            decisionMaker = decisionMaker.split("/")[1];
            User user = (User)userDAO.findByEmployeeId(decisionMaker).get(0);
            decisionMaker = String.valueOf(user.getUserId());
        }

        // 先按照 老库中的数据进行搜索
        List list =
            patchDAO.getExcelExportList(title, product, patch, NPMSNumber, CMMNumber, modifier, decisionVersion, department, involvedBoard, involvedVersion, involvedSite, decisionMaker,
                decisionResult, qstatus, qproduct, siteAttent, siteSafety, isEquipmentAffect, isEquipmentAffectTxt, isMaintain, questionStartDate, questionEndDate, requirementStartDate,
                requirementEndDate, qversion, schemeReviewStatu, module);

        // 再按照不包含版本数据的方式进行搜索
        List<PatchExVO> resultWithOutVersion =
            patchDAO.getExcelExportListWithoutVersion(title, product, patch, NPMSNumber, CMMNumber, modifier, decisionVersion, department, involvedBoard, involvedVersion, involvedSite, decisionMaker,
                decisionResult, qstatus, qproduct, siteAttent, siteSafety, isEquipmentAffect, isEquipmentAffectTxt, isMaintain, questionStartDate, questionEndDate, requirementStartDate,
                requirementEndDate, qversion, schemeReviewStatu, module);

        // 对不包含版本数据的数据进行过滤，过滤后加入到list中
        addNewRequirement(list, resultWithOutVersion, qversion, qproduct);

        // 将导出列表中的问题来源从序号转换成实际字符串
        for (int i = 0; i < list.size(); i++)
        {
            PatchExVO o = (PatchExVO)list.get(i);
            if (o.getInvolvedSite() != null)
            {
                PatchRequirementDefectSource defectSource = getPatchRequirementDefectSourceDAO().findById(Integer.valueOf(o.getInvolvedSite()).intValue());
                o.setInvolvedSite((defectSource != null) ? defectSource.getName() : "");
            }
        }

        // for (PatchExVO o : resultWithOutVersion)
        // {
        // Integer verId = o.getVerId();
        // if (verId != null)
        // {
        // //先从新库中获取版本数据
        // DirVersion versionVO = this.getVrpLmtDAO().getVersionInfoById(verId);
        // //如果该版本还存在
        // if (versionVO != null)
        // {
        // o.setQversionname(versionVO.getName());
        //
        // //如果要搜索的产品 且版本为空 则直接的添加到结果集中
        // if (qproduct == null && StringUtils.isEmpty(qversion))
        // {
        // list.add(o);
        // }
        // else
        // {
        // //产品和r版本 至少有一个不为空，则按照不为空的进行判断是否满足条件
        // boolean isStatisfyVersion = true;
        // //r版本不为空，则按照r版本是否满足进行判断
        // if (StringUtils.isNotEmpty(qversion))
        // {
        // if (!StringUtils.equalsIgnoreCase(qversion, versionVO.getBrief()))
        // {
        // isStatisfyVersion = false;
        // }
        // }
        // //如果r版本就不满足，则不再判断产品是否满足了
        // if (isStatisfyVersion && qproduct != null)
        // {
        // String productName = this.getProductNameById(qproduct);
        // //如果产品能够满足条件
        // if (!StringUtils.equalsIgnoreCase(versionVO.getProductName(), productName))
        // {
        // isStatisfyVersion = false;
        // }
        // }
        // //如果都满足则将此条数据加入到最终的结果集中
        // if (isStatisfyVersion)
        // {
        // list.add(o);
        // }
        // }
        // }
        // }
        // }
        //
        //
        //
        // for (Object o : list)
        // {
        // PatchVO patchInfo = (PatchVO)o;
        // if (patchInfo.getRequirementVersionSrc() == 1)
        // {
        // patchInfo.setQversionname(this.vrpLmtDAO.getValueFromVrplmt("dir_version", "id", patchInfo.getVerId() + "",
        // "name"));
        // }
        // }

        File f = new File(fileName);
        f.createNewFile();
        // 生成数据表
        //1210xiugai
        //writeExcel(new FileOutputStream(f), list);
        writeExcelNew(new FileOutputStream(f), list);
        //1210end
        
        return fileName;
    }

    //1210new
    @SuppressWarnings("unchecked")
    public void writeExcelNew(OutputStream os, List dateList)
        throws Exception
    {
        WritableWorkbook wwb = Workbook.createWorkbook(os);
        WritableSheet ws = wwb.createSheet("需求补丁数据", 0);

        // 字体样式的设定
        WritableFont wfc = new WritableFont(WritableFont.ARIAL, 12, WritableFont.BOLD, false, UnderlineStyle.NO_UNDERLINE, jxl.format.Colour.BLACK);
        WritableCellFormat wcfFC = new WritableCellFormat(wfc);
        // 单元格背景色的设定
        wcfFC.setBackground(jxl.format.Colour.AQUA);
        // 列头的设定
        Label label = new Label(0, 0, "项目组", wcfFC);
        ws.addCell(label);
        label = new Label(1, 0, "补丁版本", wcfFC);
        ws.addCell(label);        
        label = new Label(2, 0, "补丁编号", wcfFC);
        ws.addCell(label);  
        label = new Label(3, 0, "迭代", wcfFC);
        ws.addCell(label);  
        label = new Label(4, 0, "问题单号", wcfFC);
        ws.addCell(label);  
        label = new Label(5, 0, "问题描述", wcfFC);
        ws.addCell(label);  
        label = new Label(6, 0, "特性", wcfFC);
        ws.addCell(label);  
        label = new Label(7, 0, "补丁类型", wcfFC);
        ws.addCell(label);  
        label = new Label(8, 0, "修改版本", wcfFC);
        ws.addCell(label);  
        label = new Label(9, 0, "设备形态", wcfFC);
        ws.addCell(label);  
        label = new Label(10, 0, "开发责任人", wcfFC);
        ws.addCell(label);  
        label = new Label(11, 0, "维优责任人", wcfFC);
        ws.addCell(label);  
        label = new Label(12, 0, "测试责任人", wcfFC);
        ws.addCell(label);  
        label = new Label(13, 0, "问题来源", wcfFC);
        ws.addCell(label);  
        label = new Label(14, 0, "是否对外承诺", wcfFC);
        ws.addCell(label);  
        label = new Label(15, 0, "承诺交付时间", wcfFC);
        ws.addCell(label);  
        label = new Label(16, 0, "问题触发条件", wcfFC);
        ws.addCell(label);  
        label = new Label(17, 0, "问题根因", wcfFC);
        ws.addCell(label);  
        label = new Label(18, 0, "问题影响", wcfFC);
        ws.addCell(label);  
        label = new Label(19, 0, "修改方案", wcfFC);
        ws.addCell(label); 
        label = new Label(20, 0, "规避方案", wcfFC);
        ws.addCell(label); 
        label = new Label(21, 0, "应急措施", wcfFC);
        ws.addCell(label); 
        label = new Label(22, 0, "是否对外体现", wcfFC);
        ws.addCell(label); 
        label = new Label(23, 0, "项目组预审意见", wcfFC);
        ws.addCell(label); 
        label = new Label(24, 0, "是否安全问题", wcfFC);
        ws.addCell(label); 
        label = new Label(25, 0, "是否可维可靠", wcfFC);
        ws.addCell(label);
        label = new Label(26, 0, "装备影响", wcfFC);
        ws.addCell(label);
        label = new Label(27, 0, "是否合入", wcfFC);
        ws.addCell(label);
        label = new Label(28, 0, "优先级", wcfFC);
        ws.addCell(label);
        label = new Label(29, 0, "风险评估", wcfFC);
        ws.addCell(label);
        label = new Label(30, 0, "组内评审结论", wcfFC);
        ws.addCell(label);
        label = new Label(31, 0, "铁三角评审结论", wcfFC);
        ws.addCell(label);
        label = new Label(32, 0, "方案澄清结论", wcfFC);
        ws.addCell(label);
        label = new Label(33, 0, "预验收结论", wcfFC);
        ws.addCell(label);
        label = new Label(34, 0, "超链接", wcfFC);
        ws.addCell(label);
        label = new Label(35, 0, "现网版本", wcfFC);
        ws.addCell(label);
        
        // 数据的设定
        for (int i = 0; i < dateList.size(); i++)
        {
            PatchExVO patchVO = (PatchExVO)dateList.get(i);
            // 项目组1
            label = new Label(0, i + 1, patchVO.getDepartmentName());
            ws.addCell(label);
            // 补丁版本
            label = new Label(1, i + 1, patchVO.getPatchversion());
            ws.addCell(label);            
            // 补丁编号
            label = new Label(2, i + 1, patchVO.getQuestion());
            ws.addCell(label);
            // 迭代
            label = new Label(3, i + 1, patchVO.getIterativeStage());
            ws.addCell(label);
            //问题单号
            label = new Label(4, i + 1, patchVO.getCMMNumber());
            ws.addCell(label);
            //问题描述
            label = new Label(5, i + 1, patchVO.getDescription());
            ws.addCell(label);
            //特性
            label = new Label(6, i + 1, patchVO.getModule());
            ws.addCell(label);
            //补丁类型
            label = new Label(7, i + 1, patchVO.getVerPatchType());
            ws.addCell(label);
            //修改版本
            label = new Label(8, i + 1, patchVO.getPatchVersionBrief());
            ws.addCell(label);
            //设备形态
            label = new Label(9, i + 1, patchVO.getInvolvedBoard());
            ws.addCell(label);
            //开发责任人
            label = new Label(10, i + 1, patchVO.getDeliverPerson());
            ws.addCell(label);
            //维优责任人
            label = new Label(11, i + 1, patchVO.getMaintenance());
            ws.addCell(label);
            //测试责任人
            label = new Label(12, i + 1, patchVO.getQuestiontester());
            ws.addCell(label);
            //问题来源
            label = new Label(13, i + 1, patchVO.getInvolvedSite());
            ws.addCell(label);
            //是否对外承诺
            label = new Label(14, i + 1, patchVO.getIsPromiseOutside());
            ws.addCell(label);
            //承诺交付时间
            label = new Label(15, i + 1, patchVO.getPromiseDeliverTime());
            ws.addCell(label);
            //问题触发条件
            label = new Label(16, i + 1, patchVO.getCondition());
            ws.addCell(label);
            // 问题根因
            label = new Label(17, i + 1, patchVO.getRootCause());
            ws.addCell(label);
            // 问题影响
            label = new Label(18, i + 1, patchVO.getImpactAnalysis());
            ws.addCell(label);
            // 修改方案
            label = new Label(19, i + 1, patchVO.getModifyPlan());
            ws.addCell(label);
            // 规避方案
            label = new Label(20, i + 1, patchVO.getEvadeMeasure());
            ws.addCell(label);
            // 应急措施
            label = new Label(21, i + 1, patchVO.getEvadeMeasure());
            ws.addCell(label);
            // 是否对外体现
            String siteAtten = patchVO.getSiteAttent();
            label = new Label(22, i + 1, "是");
            if (siteAtten.equals("1"))
            {
                label = new Label(22, i + 1, "否");
            }
            ws.addCell(label);
            // 项目组预审意见
            label = new Label(23, i + 1, patchVO.getProjectDecision());
            ws.addCell(label);
            
            // 是否安全问题
            String siteSafety = patchVO.getSiteSafety();
            //label = new Label(24, i + 1, "否");
            if (StringUtils.isNotEmpty(siteSafety))
            {
                if (siteSafety.equals("0"))
                {
                    label = new Label(24, i + 1, "是");
                }else {
                    label = new Label(24, i + 1, "否");
                }
            }else {
                label = new Label(24, i + 1, "");
            }
            ws.addCell(label);
            
            // 是否可维可靠
            String isMaintain = patchVO.getIsMaintain();
            //label = new Label(25, i + 1, "否");
            if (StringUtils.isNotEmpty(isMaintain))
            {
                if (isMaintain.equals("0"))
                {
                    label = new Label(25, i + 1, "是");
                }else {
                    label = new Label(25, i + 1, "否");
                }
            }else {
                label = new Label(25, i + 1, "");
            }
            ws.addCell(label);
            
            // 装备影响
            String isEquipmentAffect = patchVO.getIsEquipmentAffect();
            //label = new Label(26, i + 1, "否");
            if (StringUtils.isNotEmpty(isEquipmentAffect))
            {
                if (isEquipmentAffect.equals("0"))
                {
                    String isEquipmentAffectTxt = patchVO.getIsEquipmentAffectTxt();
                    if(null != isEquipmentAffectTxt && !"".equals(isEquipmentAffectTxt.trim())) {
                        label = new Label(26, i + 1, "是；" + isEquipmentAffectTxt.trim());
                    }else {
                        label = new Label(26, i + 1, "是");
                    }
                }else {
                    label = new Label(26, i + 1, "否");
                }
            }else {
                label = new Label(26, i + 1, "");
            }
            ws.addCell(label);
            
            // 是否合入
            String isPutin = patchVO.getIsputin();
            String isPutinTxt = "";
            if(isPutin != null && !"".equals(isPutin.trim())){
                if (isPutin.equals("1"))
                {
                	isPutinTxt = "评审合入";
                }else if(isPutin.equals("2")){
                	isPutinTxt = "新增合入";
                }else if(isPutin.equals("3")){
                	isPutinTxt = "评审不合入";
                }
            }
            label = new Label(27, i + 1, isPutinTxt);
            ws.addCell(label);
            
            // 优先级
            String priority = patchVO.getPriority();
            if(priority != null && !"".equals(priority)){
	            if (priority.equals("0"))
	            {
	            	priority = "";
	            }
            }
            label = new Label(28, i + 1, priority);
            ws.addCell(label);
            
            // 风险评估
            String isRisk = patchVO.getIsRisk();
            if(isRisk!=null&&!"".equals(isRisk)){
	            if (isRisk .equals("0"))
	            {
	            	isRisk = "";
	            }
            }
            label = new Label(29, i + 1, isRisk);
            ws.addCell(label);
            
            // 组内评审结论
            String conclusion = patchVO.getDesc();
            label = new Label(30, i + 1, conclusion);
            ws.addCell(label);
            
            // 铁三角评审结论
            String judgeConclusion = patchVO.getJudgeConclusion();
            label = new Label(31, i + 1, judgeConclusion);
            ws.addCell(label);
            
            // 方案澄清结论
            String clarifyConclusion = patchVO.getClarifyConclusion();
            label = new Label(32, i + 1, clarifyConclusion);
            ws.addCell(label);
            
            // 预验收结论
            String seReviewComment = patchVO.getSeReviewComment();
            label = new Label(33, i + 1, seReviewComment);
            ws.addCell(label);
            
            String requirementId = String.valueOf(patchVO.getId());
            WritableHyperlink link = new WritableHyperlink(34, i+1, new URL("http://10.171.147.93/project/patch/editRequirement.action?id="+requirementId));
            link.setDescription("链接到此需求");
            ws.addHyperlink(link);

            // 现网版本
            String decisionVersion = patchVO.getDecisionVersion();
            label = new Label(35, i + 1, decisionVersion);
            ws.addCell(label);
            
            //ws.addCell(label);

        }

        // 写入Exel工作表
        wwb.write();
        // 关闭Excel工作薄对象
        wwb.close();
    }
    
    //1210end
    
    @SuppressWarnings("unchecked")
    public void writeExcel(OutputStream os, List dateList)
        throws Exception
    {
        WritableWorkbook wwb = Workbook.createWorkbook(os);
        WritableSheet ws = wwb.createSheet("需求补丁数据", 0);

        // 字体样式的设定
        WritableFont wfc = new WritableFont(WritableFont.ARIAL, 12, WritableFont.BOLD, false, UnderlineStyle.NO_UNDERLINE, jxl.format.Colour.BLACK);
        WritableCellFormat wcfFC = new WritableCellFormat(wfc);
        // 单元格背景色的设定
        wcfFC.setBackground(jxl.format.Colour.AQUA);
        // 列头的设定
        Label label = new Label(0, 0, "项目组", wcfFC);
        ws.addCell(label);
        label = new Label(1, 0, "补丁任务书编号", wcfFC);
        ws.addCell(label);
        label = new Label(2, 0, "问题单号", wcfFC);
        ws.addCell(label);
        label = new Label(3, 0, "问题描述", wcfFC);
        ws.addCell(label);
        label = new Label(4, 0, "特性", wcfFC);
        ws.addCell(label);
        label = new Label(5, 0, "补丁类型", wcfFC);
        ws.addCell(label);
        label = new Label(6, 0, "修改版本", wcfFC);
        ws.addCell(label);
        label = new Label(7, 0, "设备形态", wcfFC);
        ws.addCell(label);
        label = new Label(8, 0, "补丁制作人", wcfFC);
        ws.addCell(label);
        label = new Label(9, 0, "维优责任人", wcfFC);
        ws.addCell(label);
        label = new Label(10, 0, "测试责任人", wcfFC);
        ws.addCell(label);
        label = new Label(11, 0, "问题来源", wcfFC);
        ws.addCell(label);
        label = new Label(12, 0, "触发条件", wcfFC);
        ws.addCell(label);
        label = new Label(13, 0, "代码根因", wcfFC);
        ws.addCell(label);
        label = new Label(14, 0, "影响分析", wcfFC);
        ws.addCell(label);
        label = new Label(15, 0, "修改方案", wcfFC);
        ws.addCell(label);
        label = new Label(16, 0, "规避措施", wcfFC);
        ws.addCell(label);
        label = new Label(17, 0, "应急措施", wcfFC);
        ws.addCell(label);
        label = new Label(18, 0, "是否对外体现", wcfFC);
        ws.addCell(label);
        label = new Label(19, 0, "项目组预审意见", wcfFC);
        ws.addCell(label);
        label = new Label(20, 0, "是否是安全问题", wcfFC);
        ws.addCell(label);
        label = new Label(21, 0, "是否可维可靠问题", wcfFC);
        ws.addCell(label);
        label = new Label(22, 0, "对装备有什么影响", wcfFC);
        ws.addCell(label);
        
        //1120new
        label = new Label(23, 0, "需求链接", wcfFC);
        ws.addCell(label);
        
        //1120end

        // 数据的设定
        for (int i = 0; i < dateList.size(); i++)
        {
            PatchExVO patchVO = (PatchExVO)dateList.get(i);
            // 项目组
            label = new Label(0, i + 1, patchVO.getDepartmentName());
            ws.addCell(label);
            // 补丁任务书编号
            label = new Label(1, i + 1, patchVO.getQuestion());
            ws.addCell(label);
            // 补丁跟踪CMM问题单号
            label = new Label(2, i + 1, patchVO.getCMMNumber());
            ws.addCell(label);
            // 问题描述
            label = new Label(3, i + 1, patchVO.getDescription());
            ws.addCell(label);
            // 特性
            label = new Label(4, i + 1, patchVO.getModule());
            ws.addCell(label);
            // 补丁类型
            label = new Label(5, i + 1, patchVO.getVerPatchType());
            ws.addCell(label);
            // 合入R版本
            label = new Label(6, i + 1, patchVO.getPatchVersionBrief());
            ws.addCell(label);
            // 设备形态
            label = new Label(7, i + 1, patchVO.getInvolvedBoard());
            ws.addCell(label);
            // 补丁制作人
            label = new Label(8, i + 1, patchVO.getDeliverPerson());
            ws.addCell(label);
            // 维优责任人
            label = new Label(9, i + 1, patchVO.getMaintenance());
            ws.addCell(label);
            // 测试责任人
            label = new Label(10, i + 1, patchVO.getQuestiontester());
            ws.addCell(label);
            // 问题来源
            label = new Label(11, i + 1, patchVO.getInvolvedSite());
            ws.addCell(label);
            // 条件
            label = new Label(12, i + 1, patchVO.getCondition());
            ws.addCell(label);
            // 根因
            label = new Label(13, i + 1, patchVO.getRootCause());
            ws.addCell(label);
            // 影响
            label = new Label(14, i + 1, patchVO.getImpactAnalysis());
            ws.addCell(label);
            // 方案
            label = new Label(15, i + 1, patchVO.getModifyPlan());
            ws.addCell(label);
            // 规避措施
            label = new Label(16, i + 1, patchVO.getEvadeMeasure());
            ws.addCell(label);
            // 应急措施
            label = new Label(17, i + 1, patchVO.getEvadeMeasure());
            ws.addCell(label);
            // 是否对外体现
            String siteAtten = patchVO.getSiteAttent();

            label = new Label(18, i + 1, "是");
            if (siteAtten.equals("1"))
            {
                label = new Label(18, i + 1, "否");
            }
            ws.addCell(label);

            // 项目组合入意见
            label = new Label(19, i + 1, patchVO.getProjectDecision());
            ws.addCell(label);

            // 是否是安全问题
            String siteSafety = patchVO.getSiteSafety();
            label = new Label(20, i + 1, "否");
            if (StringUtils.isNotEmpty(siteSafety))
            {
                if (siteSafety.equals("0"))
                {
                    label = new Label(20, i + 1, "是");
                }

            }
            ws.addCell(label);

            // 是否可维可靠问题
            String isMaintain = patchVO.getIsMaintain();
            label = new Label(21, i + 1, "否");
            if (StringUtils.isNotEmpty(isMaintain))
            {
                if (isMaintain.equals("0"))
                {
                    label = new Label(21, i + 1, "是");
                }
            }
            ws.addCell(label);
            // 对装备有什么影响
            String isEquipmentAffect = patchVO.getIsEquipmentAffect();
            label = new Label(22, i + 1, "否");
            if (StringUtils.isNotEmpty(isEquipmentAffect))
            {
                if (isEquipmentAffect.equals("0"))
                {
                    String isEquipmentAffectTxt = patchVO.getIsEquipmentAffectTxt();
                    label = new Label(22, i + 1, isEquipmentAffectTxt);
                }
            }
            //1120new
            String requirementId = String.valueOf(patchVO.getId());
            WritableHyperlink link = new WritableHyperlink(23, i+1, new URL("http://10.171.147.93/project/patch/editRequirement.action?id="+requirementId));
            link.setDescription("链接到此需求");
            ws.addHyperlink(link);
            //label = new Label(23, i + 1, "<a href='http://10.171.147.93/project/patch/editRequirement.action?id="+requirementId+"'>"+"点此进入</a>");
            //1120end
            
            ws.addCell(label);

        }

        // 写入Exel工作表
        wwb.write();
        // 关闭Excel工作薄对象
        wwb.close();
    }

    /**
     * 超时发邮
     * 
     * @param task
     * @throws SQLException
     * @throws ClassNotFoundException
     * @throws IllegalAccessException
     * @throws InstantiationException
     */
    public void sendReqExpiredMail()
        throws InstantiationException, IllegalAccessException, ClassNotFoundException, SQLException
    {
        ReqMailTask timerTask = new ReqMailTask();
        timerTask.setParametersDAO(parametersDAO);
        timerTask.setPatchDAO(patchDAO);
        timerTask.sendRequirementMail();
    }

    public String buildMailContent(PatchVOPlus patch, boolean changeStatus)
    {
        new SimpleDateFormat("yyyy-MM-dd");
        StringBuilder contentBuilder = new StringBuilder();
        contentBuilder.append("<html>");
        contentBuilder.append("<head>");
        // style
        contentBuilder.append("<style>");
        contentBuilder.append(".modify_tab1{ ");
        contentBuilder.append("border:1px solid #bbc9d1;");
        contentBuilder.append("text-align:left;");
        contentBuilder.append(" }");
        contentBuilder.append(".tdtitle{");
        contentBuilder.append("background-color:#EFEFEF;");
        contentBuilder.append("padding-left:10px;");
        contentBuilder.append("height:30px;");
        contentBuilder.append("width:130px;");
        contentBuilder.append("text-align:left;");
        contentBuilder.append(" }");
        contentBuilder.append(".tdContent{");
        contentBuilder.append("text-align:left;");
        contentBuilder.append("height:30px;");
        contentBuilder.append("padding-left:10px;");
        contentBuilder.append("}");
        contentBuilder.append("</style>");
        contentBuilder.append("</head>");
        contentBuilder.append("<body>");
        // content
        contentBuilder.append("<p>您好, 补丁<a href=\"" + parametersDAO.findById(4).getValue()
        // + "http://localhost:8080"
            + "/project/patch/viewPatch.action?id=" + patch.getId() + "\">(" + patch.getPatchVersion() + ")</a> ");
        if (changeStatus)
        {
            contentBuilder.append(patch.getStatusName() + ", 详细信息如下:	</p><br/>");
        }
        else
        {
            contentBuilder.append("内容已被人修改, 详细信息如下:	</p><br/>");
        }
        contentBuilder.append("<table width=\"100%\" cellpadding=\"0\" cellspacing=\"0\" class='modify_tab1' >");
        contentBuilder.append("<tr >");
        contentBuilder.append("<td  class=\"tdtitle\" >状态：</td>");
        contentBuilder.append("<td  class=\"tdContent\" width=\"260px\" >&nbsp;" + patch.getStatusName() + "</td>");
        contentBuilder.append("<td  class=\"tdtitle\" >所属产品：</td>");
        contentBuilder.append("<td  class=\"tdContent\" width=\"500px\" >&nbsp;" + patch.getProductName() + "</td>");
        contentBuilder.append("</tr>");
        contentBuilder.append("<tr>");
        contentBuilder.append("<td  class=\"tdtitle\" >产品补丁号：</td>");
        contentBuilder.append("<td  class=\"tdContent\" width=\"260px\" >&nbsp;" + patch.getPatchVersion() + "</td>");
        contentBuilder.append("<td  class=\"tdtitle\" >R版本：</td>");
        contentBuilder.append("<td  class=\"tdContent\" width=\"500px\" >&nbsp;" + patch.getPatchVersionBrief() + " </td>");
        contentBuilder.append("</tr>");
        contentBuilder.append("<tr>");
        contentBuilder.append("<td  class=\"tdtitle\" >版本管理员：</td>");
        contentBuilder.append("<td  class=\"tdContent\" width=\"260px\" >&nbsp;" + patch.getPatchOwner() + "</td>");
        if (patch.getStatus() == 1)
        {
            contentBuilder.append("<td  class=\"tdtitle\" >预计封板时间：</td>");
        }
        else
        {
            contentBuilder.append("<td  class=\"tdtitle\" >封板时间：</td>");
        }
        contentBuilder.append("<td  class=\"tdContent\" width=\"500px\" >&nbsp;" + patch.getCloseTimeStr() + "</td>");
        contentBuilder.append("</tr>");
        contentBuilder.append("<tr>");
        if (patch.getStatus() <= 2)
        {
            contentBuilder.append("<td  class=\"tdtitle\" >预计启动时间：</td>");
        }
        else
        {
            contentBuilder.append("<td  class=\"tdtitle\" >启动时间：</td>");
        }
        contentBuilder.append("<td  class=\"tdContent\" width=\"260px\" >&nbsp;" + patch.getStartTimeStr() + " </td>");
        if (patch.getStatus() <= 3)
        {
            contentBuilder.append("<td  class=\"tdtitle\" >预计发布时间：</td>");
        }
        else
        {
            contentBuilder.append("<td  class=\"tdtitle\" >发布时间：</td>");
        }
        contentBuilder.append("<td  class=\"tdContent\" width=\"500px\" >&nbsp;" + patch.getReleaseTimeStr() + "</td>");
        contentBuilder.append("</tr>");
        contentBuilder.append("<tr>");
        contentBuilder.append("<td  class=\"tdtitle\" >描述：</td>");
        contentBuilder.append("<td  colspan=\"3\">");
        contentBuilder.append("<textarea rows=\"6\" cols=\"110\">" + patch.getDescription() + "</textarea>");
        contentBuilder.append("</td>");
        contentBuilder.append("</tr>");
        contentBuilder.append("</table>");
        contentBuilder.append("</body>");
        contentBuilder.append("</html>");

        return contentBuilder.toString();
    }

    //1120new
    public List<String> buildMailAccount(List<String> users) throws Exception{
    	List<String> all = new ArrayList<String>();
    	for(String str : users){
    		String tmp = this.patchDAO.buildMailAcount(str);
    		if(tmp!=null&&!"".equals(tmp)){
    			all.add(tmp);
    		}
    	}
    	
    	//all = this.patchDAO.buildMailAcount(users);
    	return all;
    }
    
    
    public String buildMailContentNewFuckTab(PatchVOPlus patch, boolean changeStatus,List dirDirList,List planDirList) throws FileNotFoundException
    {
        new SimpleDateFormat("yyyy-MM-dd");
        StringBuilder contentBuilder = new StringBuilder();
        contentBuilder.append("<!DOCTYPE html PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\" \"http://www.w3.org/TR/html4/loose.dtd\">");
        contentBuilder.append("<html>");
        contentBuilder.append("<head>");
        // style
        contentBuilder.append("<meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\">");
        contentBuilder.append("<style>");
        contentBuilder.append(".modify_tab1{ ");
        contentBuilder.append("border:1px solid #d6d6d6;");
        contentBuilder.append("text-align:center;");
        contentBuilder.append("width:680px;");
        contentBuilder.append(" }");
        contentBuilder.append(".tdtitle{");
        contentBuilder.append("padding-left:10px;");
        contentBuilder.append("height:30px;");
        contentBuilder.append("font:13px \"Trebuchet MS\", Arial, Helvetica, sans-serif;");
        contentBuilder.append("font-weight:bold;");
        contentBuilder.append("text-align:center;");
        contentBuilder.append(" }");
        contentBuilder.append(".modify_tab1 tr td{");
        contentBuilder.append("border:1px solid #d6d6d6;");
        contentBuilder.append("border-collapse:collapse;");
        contentBuilder.append("}");
        contentBuilder.append(".tdContent{");
        contentBuilder.append("text-align:center;");
        contentBuilder.append("height:30px;");
        contentBuilder.append("font:12px \"Trebuchet MS\", Arial, Helvetica, sans-serif;");
        contentBuilder.append("}");
        //1120new
        contentBuilder.append("body{");
        contentBuilder.append("min-width:1300px;");
        contentBuilder.append("width:auto;");
        contentBuilder.append("position:absolute;");
        contentBuilder.append("}");
        contentBuilder.append(".startBox{");
        contentBuilder.append("display: inline;");
        contentBuilder.append("float: left;");
        contentBuilder.append("}");
        contentBuilder.append(".reqTable{");
        contentBuilder.append("border:#d6d6d6 1px solid;");
        contentBuilder.append("min-width:1300px;");
        contentBuilder.append("cellspacing=\"0\" cellpadding=\"0\"");
        contentBuilder.append("width:auto;");
        contentBuilder.append("line-height:30px;");
        contentBuilder.append("table-layout:fixed;");
        contentBuilder.append("}");
        contentBuilder.append(".reqTable tr td{");
        contentBuilder.append("border:#d6d6d6 1px solid;");
        contentBuilder.append("border-collapse:collapse;");
        contentBuilder.append("font:12px \"Trebuchet MS\", Arial, Helvetica, sans-serif;");
        contentBuilder.append("}");
        contentBuilder.append(".reqTabtr1{");
        contentBuilder.append("background-color:#f2f2f4;");
        contentBuilder.append("}");
        contentBuilder.append(".reqTabletdmax{");
        contentBuilder.append("width:auto;");
        contentBuilder.append("}");
        contentBuilder.append(".maxTd{");
        contentBuilder.append("width:200px;");
        contentBuilder.append("}");
        contentBuilder.append(".maxTd2{");
        contentBuilder.append("width:250px;");
        contentBuilder.append("}");
        contentBuilder.append(".problemTab{");
        contentBuilder.append("line-height:30px;");
        contentBuilder.append("font:13px \"Trebuchet MS\", Arial, Helvetica, sans-serif;");
        contentBuilder.append("}");
        contentBuilder.append(".problemTab tr td{");
        contentBuilder.append("border:1px solid #d6d6d6;");
        contentBuilder.append("border-collapse:collapse;");
        contentBuilder.append("}");
        
        //1120end
        contentBuilder.append("</style>");
        contentBuilder.append("</head>");
        contentBuilder.append("<body>");
        // content
        contentBuilder.append("<table style=\"position:absolute;min-width:1300px !important;\"><tr><td>");
        
        contentBuilder.append("<table style=\"width:80%;\">");
        contentBuilder.append("<tr><td style=\"text-align:center;background-color:white;font:18px \"Trebuchet MS\", Arial, Helvetica, sans-serif;\">");
        contentBuilder.append("<H2><font style=\"font-family:微软雅黑,宋体;font-weight:bold;\">数据中心交换机维护部补丁开发进展:<a href=\"" + "http://10.171.147.93"  //parametersDAO.findById(4).getValue()
        // + "http://localhost:8080"
            + "/project/patch/viewPatch.action?id=" + patch.getId() + "\">(" + patch.getPatchVersion() + ")</a> ");
        if (changeStatus)
        {
            contentBuilder.append(patch.getStatusName() + "详细信息如下:	</font></H2><br/>");
        }
        else
        {
            contentBuilder.append("内容已被人修改, 详细信息如下:	</font></H2><br/>");
        }
        //1120new
        
        contentBuilder.append("</td></tr>");
        contentBuilder.append("</table>");
        contentBuilder.append("<br>");
        contentBuilder.append("<h4>补丁网站地址：<br><a href=\"http://10.171.147.93/project/loginaction/init.action\">   http://10.171.147.93/project/loginaction/init.action</a></h4>");
        
        contentBuilder.append("<hr>");
        contentBuilder.append("<h4>一、补丁概述：</h4>");
        //1120end
        //contentBuilder.append("<table width=\"100%\" cellpadding=\"0\" cellspacing=\"0\" class='modify_tab1' >");
        contentBuilder.append("<table cellpadding=\"0\" cellspacing=\"0\" class='modify_tab1' >");
        
        contentBuilder.append("<tr >");
        contentBuilder.append("<td  class=\"tdtitle\" ><B>状态：</B></td>");
        contentBuilder.append("<td  class=\"tdContent\">&nbsp;" + patch.getStatusName() + "</td>");
        contentBuilder.append("<td  class=\"tdtitle\" >所属产品：</td>");
        contentBuilder.append("<td  class=\"tdContent\">&nbsp;" + patch.getProductName() + "</td>");
        contentBuilder.append("</tr>");
        
        contentBuilder.append("<tr style=\"background-color:#F2F2F4\">");
        contentBuilder.append("<td  class=\"tdtitle\" >产品补丁号：</td>");
        contentBuilder.append("<td  class=\"tdContent\">&nbsp;" + patch.getPatchVersion() + "</td>");
        contentBuilder.append("<td  class=\"tdtitle\" >R版本：</td>");
        contentBuilder.append("<td  class=\"tdContent\">&nbsp;" + patch.getPatchVersionBrief() + " </td>");
        contentBuilder.append("</tr>");
        
        contentBuilder.append("<tr>");
        contentBuilder.append("<td  class=\"tdtitle\" >版本管理员：</td>");
        contentBuilder.append("<td  class=\"tdContent\">&nbsp;" + patch.getPatchOwner() + "</td>");
        if (patch.getStatus() == 1)
        {
            contentBuilder.append("<td  class=\"tdtitle\" >预计封板时间：</td>");
        }
        else
        {
            contentBuilder.append("<td  class=\"tdtitle\" >封板时间：</td>");
        }
        contentBuilder.append("<td  class=\"tdContent\" width=\"500px\" >&nbsp;" + patch.getCloseTimeStr() + "</td>");
        contentBuilder.append("</tr>");
        
        contentBuilder.append("<tr style=\"background-color:#F2F2F4\">");
        if (patch.getStatus() <= 2)
        {
            contentBuilder.append("<td  class=\"tdtitle\" >预计启动时间：</td>");
        }
        else
        {
            contentBuilder.append("<td  class=\"tdtitle\" >启动时间：</td>");
        }
        contentBuilder.append("<td  class=\"tdContent\" width=\"260px\" >&nbsp;" + patch.getStartTimeStr() + " </td>");
        if (patch.getStatus() <= 3)
        {
            contentBuilder.append("<td  class=\"tdtitle\" >预计发布时间：</td>");
        }
        else
        {
            contentBuilder.append("<td  class=\"tdtitle\" >发布时间：</td>");
        }
        contentBuilder.append("<td  class=\"tdContent\" width=\"500px\" >&nbsp;" + patch.getReleaseTimeStr() + "</td>");
        contentBuilder.append("</tr>");
        
        contentBuilder.append("<tr>");
        contentBuilder.append("<td  class=\"tdtitle\" >描述：</td>");
        contentBuilder.append("<td  colspan=\"3\" style=\"font:12px \"Trebuchet MS\", Arial, Helvetica, sans-serif;\">");
        contentBuilder.append("<textarea rows=\"6\" cols=\"110\">" + patch.getDescription() + "</textarea>");
        contentBuilder.append("</td>");
        contentBuilder.append("</tr>");
        
        contentBuilder.append("</table>");
        
        //1120begin
        //时间轴如下
        //!!!!!!!!!!!!!!!!!!!!!outlook发送邮件只能用行内样式，不支持div，只能用table布局
        //1120new
        String statu = patch.getStatus().toString();
        
        contentBuilder.append("<br>");
        contentBuilder.append("<br>");
        contentBuilder.append("<hr>");
        contentBuilder.append("<h4>二、补丁计划：</h4>");
        //1120end
        for(int i=0;i<planDirList.size();i++){
        	int index=0;
        	
        	PatchPlan plan = (PatchPlan) planDirList.get(i);
        	/*
        	String startTime0 = plan.getStartTime0().toString();
        	String clariTime = plan.getClariTime().toString();
        	String archivingTime1 = plan.getArchivingTime1().toString();
        	String detectTime1 = plan.getDetectTime1().toString();
        	String archivingTime2 = plan.getArchivingTime2().toString();
        	String detectTime2 = plan.getDetectTime2().toString();
        	String archivingTime3 = plan.getArchivingTime3().toString();
        	String safetyTestTime = plan.getSafetyTestTime().toString();
        	String archivingTime = plan.getArchivingTime().toString();
        	String releaseTime1 = plan.getReleaseTime1().toString();
        	*/
        	String startTime0 ;
        	String clariTime ;
        	String archivingTime1 ;
        	String detectTime1 ;
        	String archivingTime2 ;
        	String detectTime2 ;
        	String archivingTime3 ;
        	String safetyTestTime ;
        	String archivingTime ;
        	String releaseTime1 ;
        	if(plan.getStartTime0()!=null){
        		startTime0 = plan.getStartTime0().toString();
        	}else{
        		startTime0 = "";
        	}
        	if(plan.getClariTime()!=null){
        		clariTime = plan.getClariTime().toString();
        	}else{
        		clariTime = "";
        	}
        	if(plan.getArchivingTime1()!=null){
        		archivingTime1 = plan.getArchivingTime1().toString();
        	}else{
        		archivingTime1 = "";
        	}
        	if(plan.getDetectTime1()!=null){
        		detectTime1 = plan.getDetectTime1().toString();
        	}else{
        		detectTime1 = "";
        	}
        	if(plan.getArchivingTime2()!=null){
        		archivingTime2 = plan.getArchivingTime2().toString();
        	}else{
        		archivingTime2 = "";
        	}
        	if(plan.getDetectTime2()!=null){
        		detectTime2 = plan.getDetectTime2().toString();
        	}else{
        		detectTime2 = "";
        	}
        	if(plan.getArchivingTime3()!=null){
        		archivingTime3 = plan.getArchivingTime3().toString();
        	}else{
        		archivingTime3 = "";
        	}
        	if(plan.getSafetyTestTime()!=null){
        		safetyTestTime = plan.getSafetyTestTime().toString();
        	}else{
        		safetyTestTime = "";
        	}
        	if(plan.getArchivingTime()!=null){
        		archivingTime = plan.getArchivingTime().toString();
        	}else{
        		archivingTime = "";
        	}
        	if(plan.getReleaseTime1()!=null){
        		releaseTime1 = plan.getReleaseTime1().toString();
        	}else{
        		releaseTime1 = "";
        	}
        	
        	contentBuilder.append("<br><br>");
        	contentBuilder.append("<font style=\"font-weight:bold;font:12px \"Trebuchet MS\", Arial, Helvetica, sans-serif;\">补丁"+patch.getPatchVersion()+"计划如下：</font>");
        	contentBuilder.append("<table cellspacing=\"0\" cellpadding=\"0\" style=\"position:absolute;min-width:1300px;\"><tr>");

        	//开始部分
        	if(startTime0!=null&&!"".equals(startTime0)){
        		index++;
        		contentBuilder.append("<td>");
        		contentBuilder.append("<table cellspacing=\"0\" cellpadding=\"0\" style=\"width:200px;\"><tr><td>");
        		contentBuilder.append("<table><tr><td style=\"width:200px;height: 50px;text-align: center;\">");
        		if(statu.equals("1")){
            		contentBuilder.append("<font style=\"font-size: 16px;font-weight: bold;font-family:'Trebuchet MS', Arial, Helvetica, sans-serif ;color: red\">补丁评审&任务书下发</font>");
        		}else{
            		contentBuilder.append("<font style=\"font-size: 16px;font-weight: bold;font-family:'Trebuchet MS', Arial, Helvetica, sans-serif ;color: #990033\">补丁评审&任务书下发</font>");
        		}
        		contentBuilder.append("</td></tr></table>");
        		contentBuilder.append("<table cellspacing=\"0\" cellpadding=\"0\" width=\"200px\" height=\"20px\">");
        		contentBuilder.append("<tr><td style=\"width:98px;\"></td><td style=\"height:6px;width:3px;background-color: black;\"></td><td style=\"width:98px;\"></td></tr>");
        		contentBuilder.append("<tr><td colspan=\"3\" style=\"width: 200px;height: 3px;background-color: black;\"></td></tr>");
        		contentBuilder.append("<tr><td colspan=\"3\"></td></tr>");
        		contentBuilder.append("</table>");
        		contentBuilder.append("<table><tr><td style=\"width:200px;height: 30px;text-align: center;\">");
        		if(statu.equals("1")){
            		contentBuilder.append("<font style=\"font-size: 15px;font-weight: bold;font-family:'Trebuchet MS', Arial, Helvetica, sans-serif ;color: red\">"+startTime0+"</font>");        			
        		}else{
            		contentBuilder.append("<font style=\"font-size: 15px;font-weight: bold;font-family:'Trebuchet MS', Arial, Helvetica, sans-serif ;color: #009100\">"+startTime0+"</font>");
        		}
        		contentBuilder.append("</td></tr></table>");
        		contentBuilder.append("</td></tr></table>");
        		contentBuilder.append("</td>");
        		
        	}
        	
        	if(clariTime!=null&&!"".equals(clariTime)){
        		index++;
        		contentBuilder.append("<td>");
        		contentBuilder.append("<table cellspacing=\"0\" cellpadding=\"0\" style=\"width:200px;\"><tr><td>");
        		contentBuilder.append("<table><tr><td style=\"width:200px;height: 50px;text-align: center;\">");
        		contentBuilder.append("<font style=\"font-size: 16px;font-weight: bold;font-family:'Trebuchet MS', Arial, Helvetica, sans-serif ;color: #990033\">方案澄清</font>");
        		contentBuilder.append("</td></tr></table>");
        		contentBuilder.append("<table cellspacing=\"0\" cellpadding=\"0\" width=\"200px\" height=\"20px\">");
        		contentBuilder.append("<tr><td style=\"width:98px;\"></td><td style=\"height:6px;width:3px;background-color: black;\"></td><td style=\"width:98px;\"></td></tr>");
        		contentBuilder.append("<tr><td colspan=\"3\" style=\"width: 200px;height: 3px;background-color: black;\"></td></tr>");
        		contentBuilder.append("<tr><td colspan=\"3\"></td></tr>");
        		contentBuilder.append("</table>");
        		contentBuilder.append("<table><tr><td style=\"width:200px;height: 30px;text-align: center;\">");
        		contentBuilder.append("<font style=\"font-size: 15px;font-weight: bold;font-family:'Trebuchet MS', Arial, Helvetica, sans-serif ;color: #009100\">"+clariTime+"</font>");
        		contentBuilder.append("</td></tr></table>");
        		contentBuilder.append("</td></tr></table>");
        		contentBuilder.append("</td>");
        	}
        	
        	if(archivingTime1!=null&&!"".equals(archivingTime1)){
        		index++;
        		contentBuilder.append("<td>");
        		contentBuilder.append("<table cellspacing=\"0\" cellpadding=\"0\" style=\"width:200px;\"><tr><td>");
        		contentBuilder.append("<table><tr><td style=\"width:200px;height: 50px;text-align: center;\">");
        		if(statu.equals("2")){
            		contentBuilder.append("<font style=\"font-size: 16px;font-weight: bold;font-family:'Trebuchet MS', Arial, Helvetica, sans-serif ;color: red\">交付件归档&IDP录入&创建VMP路径</font>");
        		}else{
            		contentBuilder.append("<font style=\"font-size: 16px;font-weight: bold;font-family:'Trebuchet MS', Arial, Helvetica, sans-serif ;color: #990033\">交付件归档&IDP录入&创建VMP路径</font>");
        		}
           		contentBuilder.append("</td></tr></table>");
        		contentBuilder.append("<table cellspacing=\"0\" cellpadding=\"0\" width=\"200px\" height=\"20px\">");
        		contentBuilder.append("<tr><td style=\"width:98px;\"></td><td style=\"height:6px;width:3px;background-color: black;\"></td><td style=\"width:98px;\"></td></tr>");
        		contentBuilder.append("<tr><td colspan=\"3\" style=\"width: 200px;height: 3px;background-color: black;\"></td></tr>");
        		contentBuilder.append("<tr><td colspan=\"3\"></td></tr>");
        		contentBuilder.append("</table>");
        		contentBuilder.append("<table><tr><td style=\"width:200px;height: 30px;text-align: center;\">");
        		if(statu.equals("2")){
        			contentBuilder.append("<font style=\"font-size: 15px;font-weight: bold;font-family:'Trebuchet MS', Arial, Helvetica, sans-serif ;color: red\">"+archivingTime1+"</font>");
        		}else{
        			contentBuilder.append("<font style=\"font-size: 15px;font-weight: bold;font-family:'Trebuchet MS', Arial, Helvetica, sans-serif ;color: #009100\">"+archivingTime1+"</font>");
        		}
        		contentBuilder.append("</td></tr></table>");
        		contentBuilder.append("</td></tr></table>");
        		contentBuilder.append("</td>");
        	}
        	if(detectTime1!=null&&!"".equals(detectTime1)){
        		index++;
        		contentBuilder.append("<td>");
        		contentBuilder.append("<table cellspacing=\"0\" cellpadding=\"0\" style=\"width:200px;\"><tr><td>");
        		contentBuilder.append("<table><tr><td style=\"width:200px;height: 50px;text-align: center;\">");
        		if(statu.equals("3")){
        			contentBuilder.append("<font style=\"font-size: 16px;font-weight: bold;font-family:'Trebuchet MS', Arial, Helvetica, sans-serif ;color: red\">迭代一转测</font>");
        		}else{
        			contentBuilder.append("<font style=\"font-size: 16px;font-weight: bold;font-family:'Trebuchet MS', Arial, Helvetica, sans-serif ;color: #990033\">迭代一转测</font>");
        		}
        		contentBuilder.append("</td></tr></table>");
        		contentBuilder.append("<table cellspacing=\"0\" cellpadding=\"0\" width=\"200px\" height=\"20px\">");
        		contentBuilder.append("<tr><td style=\"width:98px;\"></td><td style=\"height:6px;width:3px;background-color: black;\"></td><td style=\"width:98px;\"></td></tr>");
        		contentBuilder.append("<tr><td colspan=\"3\" style=\"width: 200px;height: 3px;background-color: black;\"></td></tr>");
        		contentBuilder.append("<tr><td colspan=\"3\"></td></tr>");
        		contentBuilder.append("</table>");
        		contentBuilder.append("<table><tr><td style=\"width:200px;height: 30px;text-align: center;\">");
        		if(statu.equals("3")){
        			contentBuilder.append("<font style=\"font-size: 15px;font-weight: bold;font-family:'Trebuchet MS', Arial, Helvetica, sans-serif ;color: red\">"+detectTime1+"</font>");
        		}else{
        			contentBuilder.append("<font style=\"font-size: 15px;font-weight: bold;font-family:'Trebuchet MS', Arial, Helvetica, sans-serif ;color: #009100\">"+detectTime1+"</font>");
        		}
          		contentBuilder.append("</td></tr></table>");
        		contentBuilder.append("</td></tr></table>");
        		contentBuilder.append("</td>");
        	}
        	if(archivingTime2!=null&&!"".equals(archivingTime2)){
        		index++;
        		contentBuilder.append("<td>");
        		contentBuilder.append("<table cellspacing=\"0\" cellpadding=\"0\" style=\"width:200px;\"><tr><td>");
        		contentBuilder.append("<table><tr><td style=\"width:200px;height: 50px;text-align: center;\">");
        		contentBuilder.append("<font style=\"font-size: 16px;font-weight: bold;font-family:'Trebuchet MS', Arial, Helvetica, sans-serif ;color: #990033\">迭代二归档&录入IDP&评审</font>");
        		contentBuilder.append("</td></tr></table>");
        		contentBuilder.append("<table cellspacing=\"0\" cellpadding=\"0\" width=\"200px\" height=\"20px\">");
        		contentBuilder.append("<tr><td style=\"width:98px;\"></td><td style=\"height:6px;width:3px;background-color: black;\"></td><td style=\"width:98px;\"></td></tr>");
        		contentBuilder.append("<tr><td colspan=\"3\" style=\"width: 200px;height: 3px;background-color: black;\"></td></tr>");
        		contentBuilder.append("<tr><td colspan=\"3\"></td></tr>");
        		contentBuilder.append("</table>");
        		contentBuilder.append("<table><tr><td style=\"width:200px;height: 30px;text-align: center;\">");
        		contentBuilder.append("<font style=\"font-size: 15px;font-weight: bold;font-family:'Trebuchet MS', Arial, Helvetica, sans-serif ;color: #009100\">"+archivingTime2+"</font>");
        		contentBuilder.append("</td></tr></table>");
        		contentBuilder.append("</td></tr></table>");
        		contentBuilder.append("</td>");
        	}
        	if(detectTime2!=null&&!"".equals(detectTime2)){
        		index++;
        		contentBuilder.append("<td>");
        		contentBuilder.append("<table cellspacing=\"0\" cellpadding=\"0\" style=\"width:200px;\"><tr><td>");
        		contentBuilder.append("<table><tr><td style=\"width:200px;height: 50px;text-align: center;\">");
        		contentBuilder.append("<font style=\"font-size: 16px;font-weight: bold;font-family:'Trebuchet MS', Arial, Helvetica, sans-serif ;color: #990033\">迭代二转测</font>");
        		contentBuilder.append("</td></tr></table>");
        		contentBuilder.append("<table cellspacing=\"0\" cellpadding=\"0\" width=\"200px\" height=\"20px\">");
        		contentBuilder.append("<tr><td style=\"width:98px;\"></td><td style=\"height:6px;width:3px;background-color: black;\"></td><td style=\"width:98px;\"></td></tr>");
        		contentBuilder.append("<tr><td colspan=\"3\" style=\"width: 200px;height: 3px;background-color: black;\"></td></tr>");
        		contentBuilder.append("<tr><td colspan=\"3\"></td></tr>");
        		contentBuilder.append("</table>");
        		contentBuilder.append("<table><tr><td style=\"width:200px;height: 30px;text-align: center;\">");
        		contentBuilder.append("<font style=\"font-size: 15px;font-weight: bold;font-family:'Trebuchet MS', Arial, Helvetica, sans-serif ;color: #009100\">"+detectTime2+"</font>");
        		contentBuilder.append("</td></tr></table>");
        		contentBuilder.append("</td></tr></table>");
        		contentBuilder.append("</td>");
        	}
        	if(archivingTime3!=null&&!"".equals(archivingTime3)){
        		if(index%7==0){
        			contentBuilder.append("</tr>");
        			contentBuilder.append("<tr>");
        		}
        		index++;
        		contentBuilder.append("<td>");
        		contentBuilder.append("<table cellspacing=\"0\" cellpadding=\"0\" style=\"width:200px;\"><tr><td>");
        		contentBuilder.append("<table><tr><td style=\"width:200px;height: 50px;text-align: center;\">");
        		contentBuilder.append("<font style=\"font-size: 16px;font-weight: bold;font-family:'Trebuchet MS', Arial, Helvetica, sans-serif ;color: #990033\">迭代三归档&录入IDP&评审</font>");
        		contentBuilder.append("</td></tr></table>");
        		contentBuilder.append("<table cellspacing=\"0\" cellpadding=\"0\" width=\"200px\" height=\"20px\">");
        		contentBuilder.append("<tr><td style=\"width:98px;\"></td><td style=\"height:6px;width:3px;background-color: black;\"></td><td style=\"width:98px;\"></td></tr>");
        		contentBuilder.append("<tr><td colspan=\"3\" style=\"width: 200px;height: 3px;background-color: black;\"></td></tr>");
        		contentBuilder.append("<tr><td colspan=\"3\"></td></tr>");
        		contentBuilder.append("</table>");
        		contentBuilder.append("<table><tr><td style=\"width:200px;height: 30px;text-align: center;\">");
        		contentBuilder.append("<font style=\"font-size: 15px;font-weight: bold;font-family:'Trebuchet MS', Arial, Helvetica, sans-serif ;color: #009100\">"+archivingTime3+"</font>");
        		contentBuilder.append("</td></tr></table>");
        		contentBuilder.append("</td></tr></table>");
        		contentBuilder.append("</td>");

        	}
        	if(safetyTestTime!=null&&!"".equals(safetyTestTime)){
        		if(index%7==0){
        			contentBuilder.append("</tr>");
        			contentBuilder.append("<tr>");
        		}
        		index++;
        		contentBuilder.append("<td>");
        		contentBuilder.append("<table cellspacing=\"0\" cellpadding=\"0\" style=\"width:200px;\"><tr><td>");
        		contentBuilder.append("<table><tr><td style=\"width:200px;height: 50px;text-align: center;\">");
        		contentBuilder.append("<font style=\"font-size: 16px;font-weight: bold;font-family:'Trebuchet MS', Arial, Helvetica, sans-serif ;color: #990033\">输出安全测试报告&通过安全测试会签</font>");
        		contentBuilder.append("</td></tr></table>");
        		contentBuilder.append("<table cellspacing=\"0\" cellpadding=\"0\" width=\"200px\" height=\"20px\">");
        		contentBuilder.append("<tr><td style=\"width:98px;\"></td><td style=\"height:6px;width:3px;background-color: black;\"></td><td style=\"width:98px;\"></td></tr>");
        		contentBuilder.append("<tr><td colspan=\"3\" style=\"width: 200px;height: 3px;background-color: black;\"></td></tr>");
        		contentBuilder.append("<tr><td colspan=\"3\"></td></tr>");
        		contentBuilder.append("</table>");
        		contentBuilder.append("<table><tr><td style=\"width:200px;height: 30px;text-align: center;\">");
        		contentBuilder.append("<font style=\"font-size: 15px;font-weight: bold;font-family:'Trebuchet MS', Arial, Helvetica, sans-serif ;color: #009100\">"+safetyTestTime+"</font>");
        		contentBuilder.append("</td></tr></table>");
        		contentBuilder.append("</td></tr></table>");
        		contentBuilder.append("</td>");
        	}
        	if(archivingTime!=null&&!"".equals(archivingTime)){
        		if(index%7==0){
        			contentBuilder.append("</tr>");
        			contentBuilder.append("<tr>");
        		}
        		index++;
        		contentBuilder.append("<td>");
        		contentBuilder.append("<table cellspacing=\"0\" cellpadding=\"0\" style=\"width:200px;\"><tr><td>");
        		contentBuilder.append("<table><tr><td style=\"width:200px;height: 50px;text-align: center;\">");
        		contentBuilder.append("<font style=\"font-size: 16px;font-weight: bold;font-family:'Trebuchet MS', Arial, Helvetica, sans-serif ;color: #990033\">所有交付件（测试、资料、开发）归档</font>");
        		contentBuilder.append("</td></tr></table>");
        		contentBuilder.append("<table cellspacing=\"0\" cellpadding=\"0\" width=\"200px\" height=\"20px\">");
        		contentBuilder.append("<tr><td style=\"width:98px;\"></td><td style=\"height:6px;width:3px;background-color: black;\"></td><td style=\"width:98px;\"></td></tr>");
        		contentBuilder.append("<tr><td colspan=\"3\" style=\"width: 200px;height: 3px;background-color: black;\"></td></tr>");
        		contentBuilder.append("<tr><td colspan=\"3\"></td></tr>");
        		contentBuilder.append("</table>");
        		contentBuilder.append("<table><tr><td style=\"width:200px;height: 30px;text-align: center;\">");
        		contentBuilder.append("<font style=\"font-size: 15px;font-weight: bold;font-family:'Trebuchet MS', Arial, Helvetica, sans-serif ;color: #009100\">"+archivingTime+"</font>");
        		contentBuilder.append("</td></tr></table>");
        		contentBuilder.append("</td></tr></table>");
        		contentBuilder.append("</td>");
        	}
        	if(releaseTime1!=null&&!"".equals(releaseTime1)){
        		if(index%7==0){
        			contentBuilder.append("</tr>");
        			contentBuilder.append("<tr>");
        		}
        		index++;
        		contentBuilder.append("<td>");
        		contentBuilder.append("<table cellspacing=\"0\" cellpadding=\"0\" style=\"width:200px;\"><tr><td>");
        		contentBuilder.append("<table><tr><td style=\"width:200px;height: 50px;text-align: center;\">");
        		contentBuilder.append("<font style=\"font-size: 16px;font-weight: bold;font-family:'Trebuchet MS', Arial, Helvetica, sans-serif ;color: #990033\">产品发布截止日期</font>");
        		contentBuilder.append("</td></tr></table>");
        		contentBuilder.append("<table cellspacing=\"0\" cellpadding=\"0\" width=\"200px\" height=\"20px\">");
        		contentBuilder.append("<tr><td style=\"width:98px;\"></td><td style=\"height:6px;width:3px;background-color: black;\"></td><td style=\"width:98px;\"></td></tr>");
        		contentBuilder.append("<tr><td colspan=\"3\" style=\"width: 200px;height: 3px;background-color: black;\"></td></tr>");
        		contentBuilder.append("<tr><td colspan=\"3\"></td></tr>");
        		contentBuilder.append("</table>");
        		contentBuilder.append("<table><tr><td style=\"width:200px;height: 30px;text-align: center;\">");
        		contentBuilder.append("<font style=\"font-size: 15px;font-weight: bold;font-family:'Trebuchet MS', Arial, Helvetica, sans-serif ;color: #009100\">"+releaseTime1+"</font>");
        		contentBuilder.append("</td></tr></table>");
        		contentBuilder.append("</td></tr></table>");
        		contentBuilder.append("</td>");
        	}
        	
        	/*
        	contentBuilder.append("<div class=\"endArrow\">");
        	contentBuilder.append("<div style=\"width:10px;height: 51px;\">");
        	contentBuilder.append("</div>");
        	contentBuilder.append("<div style=\"margin-top:5px ;width: 50px;height: 3px;background-color: black;clear:both ;display: inline;float: left;\">");
        	contentBuilder.append("</div>");
        	contentBuilder.append("<div style=\"margin-left: -10px;width: 9px;height: 9px;border-top: 3px solid black;border-right: 3px solid black;transform:rotate(45deg);display: inline;float: left;\">");
        	contentBuilder.append("</div>");
        	contentBuilder.append("</div>");
        	*/
        	//contentBuilder.append("</div></div><br><br>");
        	
        	/*
        	contentBuilder.append("<table cellspacing=\"0\" cellpadding=\"0\" style=\"display:inline;width:80px;\"><tr><td>");
        	contentBuilder.append("<table cellspacing=\"0\" cellpadding=\"0\" style=\"width:200px;position:absolute;top:49px;left:"+(index%6)*200+"px;\">");
        	contentBuilder.append("<tr><td ><font style=\"font:45px 'Trebuchet MS', Arial, Helvetica, sans-serif;font-weight:bolder\">→</font></td></tr>");
        	contentBuilder.append("</table>");
        	*/
        	contentBuilder.append("</tr></table><br>");
        	
        }
        
        contentBuilder.append("<hr>");
        contentBuilder.append("<H4>三、需求列表：</h4>");
        //需求列表如下
        contentBuilder.append("<table class=\"reqTable\">");
        contentBuilder.append("<tr class=\"reqTabtr1\">");
        contentBuilder.append("<td colspan=\"17\">");
        contentBuilder.append("<H4>需求列表</h4>");
        contentBuilder.append("</td>");        
        contentBuilder.append("</tr>");
        
        contentBuilder.append("<tr>");
        contentBuilder.append("<td>");
        contentBuilder.append("<H5>序号</h5>");
        contentBuilder.append("</td>");
        contentBuilder.append("<td class=\"maxTd\">");
        contentBuilder.append("<H5>需求名称</h5>");
        contentBuilder.append("</td>");
        contentBuilder.append("<td>");
        contentBuilder.append("<H5>迭代</h5>");
        contentBuilder.append("</td>");
        contentBuilder.append("<td>");
        contentBuilder.append("<H5>补丁制作人</h5>");
        contentBuilder.append("</td>");
        contentBuilder.append("<td>");
        contentBuilder.append("<H5>问题所属组</h5>");
        contentBuilder.append("</td>");
        contentBuilder.append("<td>");
        contentBuilder.append("<H5>测试人员</h5>");
        contentBuilder.append("</td>");
        contentBuilder.append("<td>");
        contentBuilder.append("<H5>维优人员</h5>");
        contentBuilder.append("</td>");
        contentBuilder.append("<td>");
        contentBuilder.append("<H5>补丁序号</h5>");
        contentBuilder.append("</td>");
        contentBuilder.append("<td>");
        contentBuilder.append("<H5>问题版本</h5>");
        contentBuilder.append("</td>");
        contentBuilder.append("<td>");
        contentBuilder.append("<H5>补丁类型</h5>");
        contentBuilder.append("</td>");
        contentBuilder.append("<td>");
        contentBuilder.append("<H5>问题单号</h5>");
        contentBuilder.append("</td>");
        contentBuilder.append("<td>");
        contentBuilder.append("<H5>涉及模块</h5>");
        contentBuilder.append("</td>");
        contentBuilder.append("<td>");
        contentBuilder.append("<H5>设备形态</h5>");
        contentBuilder.append("</td>");
        contentBuilder.append("<td>");
        contentBuilder.append("<H5>优先级</h5>");
        contentBuilder.append("</td>");
        contentBuilder.append("<td>");
        contentBuilder.append("<H5>安全问题</h5>");
        contentBuilder.append("</td>");
        contentBuilder.append("<td>");
        contentBuilder.append("<H5>是否合入</h5>");
        contentBuilder.append("</td>");
        contentBuilder.append("<td class=\"maxTd2\">");
        contentBuilder.append("<H5>评审/澄清结论</h5>");
        contentBuilder.append("</td>");
        contentBuilder.append("</tr>");
        
        int problemNumpt =0;
        int problemNumyw =0;
        int problemNumzc =0;
        int problemNumsc =0;
        int problemNumqd =0;
        
        if(dirDirList==null){
        	contentBuilder.append("<tr>");
        	contentBuilder.append("<td colspan=\"17\">");
        	contentBuilder.append("暂无数据");
        	contentBuilder.append("</td>");
        	contentBuilder.append("</tr>");
        	
        }else{
        	
	        for(int i=0;i<dirDirList.size();i++){
	        	PatchExVO pv = new PatchExVO();
	        	pv = (PatchExVO) dirDirList.get(i);
	        	if(i%2==0){
	        		contentBuilder.append("<tr class=\"reqTabtr1\">");
	        	}else{
	        		contentBuilder.append("<tr>");
	        	}
	        	
	        	contentBuilder.append("<td>");
	        	contentBuilder.append(i+1);
	        	contentBuilder.append("</td>");
	        	contentBuilder.append("<td>");
	        	contentBuilder.append(pv.getTitle());
	        	contentBuilder.append("</td>");
	        	contentBuilder.append("<td>");
	        	contentBuilder.append(pv.getIterativeStage());
	        	contentBuilder.append("</td>");
	        	
	        	contentBuilder.append("<td>");
	        	if(pv.getDeliverPerson()!=null){
	            	contentBuilder.append(pv.getDeliverPerson());
	        	}else if(pv.getModifier()!=null){
	            	contentBuilder.append(pv.getModifier());
	        	}
	        	contentBuilder.append("</td>");
	        	
	        	contentBuilder.append("<td>");
	        	contentBuilder.append(pv.getDepartmentName());
	        	contentBuilder.append("</td>");
	        	contentBuilder.append("<td>");
	        	contentBuilder.append(pv.getPatchQuestiontester());
	        	contentBuilder.append("</td>");
	        	contentBuilder.append("<td>");
	        	contentBuilder.append(pv.getMaintenance());
	        	contentBuilder.append("</td>");
	        	contentBuilder.append("<td>");
	        	contentBuilder.append(pv.getQuestion());
	        	contentBuilder.append("</td>");
	        	contentBuilder.append("<td>");
	        	contentBuilder.append(pv.getQversionname());
	        	contentBuilder.append("</td>");
	        	contentBuilder.append("<td>");
	        	contentBuilder.append(pv.getPatchType());
	        	contentBuilder.append("</td>");
	        	contentBuilder.append("<td>");
	        	contentBuilder.append(pv.getCMMNumber());
	        	contentBuilder.append("</td>");
	        	contentBuilder.append("<td>");
	        	contentBuilder.append(pv.getModule());
	        	contentBuilder.append("</td>");
	        	contentBuilder.append("<td>");
	        	contentBuilder.append(pv.getInvolvedBoard());
	        	contentBuilder.append("</td>");
	        	contentBuilder.append("<td>");
	        	contentBuilder.append(pv.getPriority());
	        	contentBuilder.append("</td>");
	        	contentBuilder.append("<td>");
	        	contentBuilder.append(pv.getSiteSafety());
	        	contentBuilder.append("</td>");
	        	contentBuilder.append("<td>");
	        	contentBuilder.append(pv.getIsputinName());
	        	contentBuilder.append("</td>");
	        	contentBuilder.append("<td>");
	        	contentBuilder.append(pv.getConclusion());
	        	contentBuilder.append("</td>");
	        	contentBuilder.append("</tr>");
	        	
	        	
	        	if(pv.getDepartmentName().matches(".*平台.*")){
	        		problemNumpt++;
	        	}else if(pv.getDepartmentName().matches(".*支撑.*")){
	        		problemNumzc++;
	        	}else if(pv.getDepartmentName().matches(".*业务.*")){
	        		problemNumyw++;
	        	}else if(pv.getDepartmentName().matches(".*三层.*")){
	        		problemNumsc++;
	        	}else if(pv.getDepartmentName().matches(".*驱动.*")){
	        		problemNumqd++;
	        	}
	        	
	        }
        }
        contentBuilder.append("</table>");
        
        contentBuilder.append("<br>");
        contentBuilder.append("<hr>");
        contentBuilder.append("<h3><font style=\"font-family:'Trebuchet MS', Arial, Helvetica, sans-serif\"> 四、问题统计 </font></h3>");
        contentBuilder.append("<br>");
        //问题组统计
        contentBuilder.append("<table cellspacing=\"0\" cellpadding=\"0\" class=\"problemTab\">");
        int numTotal = problemNumpt+problemNumqd+problemNumsc+problemNumyw+problemNumzc;
        contentBuilder.append("<tr>");
        contentBuilder.append("<th colspan=\"6\"><font style=\"font-weight:bold;\">本次合入补丁问题数：</font>"+numTotal);
        contentBuilder.append("</th>");
        contentBuilder.append("</tr>");
        
        contentBuilder.append("<tr>");
        contentBuilder.append("<td colspan=\"6\"><font style=\"font-weight:bold;\">各项目组的问题个数：</font></td>");
        contentBuilder.append("</tr>");
        
        contentBuilder.append("<tr>");
        contentBuilder.append("<td><font style=\"font-weight:bold;\">项目组：</font></td>");
        contentBuilder.append("<td><font style=\"font-weight:bold;\">平台</font></td>");
        contentBuilder.append("<td><font style=\"font-weight:bold;\">维护支撑组</font></td>");
        contentBuilder.append("<td><font style=\"font-weight:bold;\">维护业务组</font></td>");
        contentBuilder.append("<td><font style=\"font-weight:bold;\">维护三层组</font></td>");
        contentBuilder.append("<td><font style=\"font-weight:bold;\">维护驱动组</font></td>");
        contentBuilder.append("</tr>");
        
        contentBuilder.append("<tr>");
        contentBuilder.append("<td><font style=\"font-weight:bold;\">问题数量：</font></td>");
        contentBuilder.append("<td>"+problemNumpt+"</td>");
        contentBuilder.append("<td>"+problemNumzc+"</td>");
        contentBuilder.append("<td>"+problemNumyw+"</td>");
        contentBuilder.append("<td>"+problemNumsc+"</td>");
        contentBuilder.append("<td>"+problemNumqd+"</td>");
        contentBuilder.append("</tr>");
        
        contentBuilder.append("</table>");
        //问题组统计end
        
        contentBuilder.append("</td></tr></table>");
        contentBuilder.append("</body>");
        contentBuilder.append("</html>");
        //文件输出
		PrintStream ps = null;
//		ps = new PrintStream(new FileOutputStream(new File("C:/Users/gWX381822/Desktop/201711/yemian.html")));
		ps = new PrintStream(new FileOutputStream(new File("C:/Users/Administrator/Documents/file/yemian.html")));
		ps.println(contentBuilder.toString());
		ps.close() ;
        //end
        
        //1120end

        return contentBuilder.toString();
    }
    
    //1120end
    
    
    
    
    
    /*
     * public List getReqVerList(Integer id) throws SQLException { String dirUrl =
     * parametersDAO.findById(28).getValue(); return patchrequirementDAO.getReqVerList(id, dirUrl); }
     */

    public List getReqVerList(Integer id)
        throws SQLException
    {
        // 首先判断此requirement是新提交的还是系统中的旧数据 根据requirement的 新旧的标志位
        Patchrequirement requirement = this.patchrequirementDAO.findById(id);
        String dirUrl = parametersDAO.findById(28).getValue();
        List<PatchRequirementVersion> result = null;
        if (requirement.getRequirementVersionSrc() == 0)
        {
            // 一般都是从这里获取信息，vrp-lmt数据库已经废弃。
            // 代表是从旧系统中获取的数据
            result = patchrequirementDAO.getReqVerList(id, dirUrl);
        }
        else
        {
            // 代表是从vrp-lmt的数据库中获取的数据
            // 首先从本地的表中获取关联的基础数据
            result = this.patchrequirementDAO.getPatchRequirementVersions(id);

            // 其次根据版本的id 从vrp-lmt库中填充版本数据
            this.vrpLmtDAO.getPatchRequirementVersion(result, dirUrl);
        }

        Map<Integer, String> schemeReviewMap = Constant.getSchemeReviewIntegerMap();
        for (PatchRequirementVersion v : result)
        {
            if (v.getSchemeReviewStatu() != null)
            {
                v.setSchemeReviewStatuName(schemeReviewMap.get(v.getSchemeReviewStatu()));
            }
        }

        Map<String, String> isPutInMap = Constant.getIsPutInMap();
        for (PatchRequirementVersion v : result)
        {
            if (v.getIsputin() != null)
            {
                v.setIsputinName(isPutInMap.get(v.getIsputin()));
            }
        }
        return result;
    }

    // 根据需求id获取 需求修改的日志记录
    public List<Reqmodifylog> getReqModifyLogListByReqId(Integer reqId)
    {
        return this.reqModifyLogDAO.findByReqid(reqId);
    }

    public void saveReqVerList(String reqId, Document doc, String userFullName)
        throws Exception
    {
        // 先获取旧的补丁需求版本
    	//1210new

        List<Element> lst = doc.selectNodes("//doc/patch");
        List<String> list = new ArrayList<String>();
        for (Element e : lst)
        {
        	String verId = getEleValue(e, "verid");
        	String iterStr = this.patchrequirementDAO.getIterativeStage(reqId, verId);
        	list.add(iterStr);
        }

    	//1210end
    	
        List<PatchRequirementVersion> reqVers = this.patchrequirementDAO.getPatchRequirementVersions(Integer.valueOf(reqId));

        Map<String, String> schemeMap = Constant.getSchemeReviewMap();
        // 调用接口保存现有的数据到数据库中
        this.patchrequirementDAO.saveReqVerList(reqId, doc);
        
        //List<Element> lst = doc.selectNodes("//doc/patch");
        for (Element e : lst)
        {
            // 获取se评审意见
            String seReviewContent = getEleValue(e, "seReviewComment");

            // se评审意见变更记录日志
            String schemeStatuChange = "";

            // 获取版本id
            String verId = getEleValue(e, "verid");

            if (StringUtils.isNotEmpty(verId))
            {
                // 得到旧的方案评审的数据
                String oldSchemeStatu = this.getSchemeStatu(verId, reqVers);

                // 得到方案评审状态的数据
                String schemeStatu = getEleValue(e, "schemeReviewStatu");

                if (!StringUtils.equals(oldSchemeStatu, schemeStatu) && StringUtils.isNotEmpty(schemeMap.get(oldSchemeStatu)))
                {
                    // 如果旧的方案评审与新的方案评审不相同
                    schemeStatuChange =
                        userFullName + "【方案评审】  由 " + schemeMap.get(oldSchemeStatu) + "更改为" + schemeMap.get(schemeStatu) + "  (" + schemeMap.get(oldSchemeStatu) + ">>" + schemeMap.get(schemeStatu)
                            + ")";
                }
            }

            // 如果任何一个有数据，则保存变更记录的log
            if (StringUtils.isNotEmpty(seReviewContent) || StringUtils.isNotEmpty(schemeStatuChange))
            {
                Reqmodifylog modifyLog = new Reqmodifylog();
                modifyLog.setHandler(userFullName);
                modifyLog.setReqid(Integer.valueOf(reqId));
                modifyLog.setSecomment(seReviewContent);
                modifyLog.setStatuchangelog(schemeStatuChange);
                modifyLog.setTime(new Date());

                String verName = getEleValue(e, "vername");
                modifyLog.setVersion(verName);
                this.reqModifyLogDAO.save(modifyLog);
            }

            // 如果se评审意见的内容不为空，则保存se评审的意见到数据库中
            if (StringUtils.isNotEmpty(seReviewContent))
            {
                SeReviewRecord seReview = new SeReviewRecord();
                seReview.setContent(seReviewContent);
                seReview.setReqid(Integer.valueOf(reqId));
                seReview.setVerid(Integer.valueOf(verId));
                this.seReviewRecordDAO.save(seReview);
            }
            
            
            //1210new

            if(list!=null){
            	for(int index=0;index<list.size();index++){
            		String it = list.get(index);
                	this.patchrequirementDAO.updateIterativeStage(it, reqId, getEleValue(lst.get(index), "verid"));
            	}
            }

            //1210end
        }
    }

    public void saveReqVerList1(String reqId, Document doc, String userFullName)
        throws Exception
    {
        // 先获取旧的补丁需求版本
        List<PatchRequirementVersion> reqVers = this.patchrequirementDAO.getPatchRequirementVersions(Integer.valueOf(reqId));

        Map<String, String> schemeMap = Constant.getSchemeReviewMap();
        // 调用接口保存现有的数据到数据库中
        this.patchrequirementDAO.saveReqVerList(reqId, doc);

        List<Element> lst = doc.selectNodes("//doc/patch");
        for (Element e : lst)
        {
            // 获取se评审意见
            String seReviewContent = getEleValue(e, "seReviewComment");

            // se评审意见变更记录日志
            String schemeStatuChange = "";

            // 获取版本id
            String verId = getEleValue(e, "verid");

            if (StringUtils.isNotEmpty(verId))
            {
                // 得到旧的方案评审的数据
                String oldSchemeStatu = this.getSchemeStatu(verId, reqVers);

                // 得到方案评审状态的数据
                String schemeStatu = getEleValue(e, "schemeReviewStatu");

                if (!StringUtils.equals(oldSchemeStatu, schemeStatu) && StringUtils.isNotEmpty(schemeMap.get(oldSchemeStatu)))
                {
                    // 如果旧的方案评审与新的方案评审不相同
                    schemeStatuChange =
                        userFullName + "【方案评审】  由 " + schemeMap.get(oldSchemeStatu) + "更改为" + schemeMap.get(schemeStatu) + "  (" + schemeMap.get(oldSchemeStatu) + ">>" + schemeMap.get(schemeStatu)
                            + ")";
                }
            }

            // 如果任何一个有数据，则保存变更记录的log
            if (StringUtils.isNotEmpty(seReviewContent) || StringUtils.isNotEmpty(schemeStatuChange))
            {
                Reqmodifylog modifyLog = new Reqmodifylog();
                modifyLog.setHandler(userFullName);
                modifyLog.setReqid(Integer.valueOf(reqId));
                modifyLog.setSecomment(seReviewContent);
                modifyLog.setStatuchangelog(schemeStatuChange);
                modifyLog.setTime(new Date());

                String verName = getEleValue(e, "vername");
                modifyLog.setVersion(verName);
                this.reqModifyLogDAO.save(modifyLog);
            }

            // 如果se评审意见的内容不为空，则保存se评审的意见到数据库中
            if (StringUtils.isNotEmpty(seReviewContent))
            {
                SeReviewRecord seReview = new SeReviewRecord();
                seReview.setContent(seReviewContent);
                seReview.setReqid(Integer.valueOf(reqId));
                seReview.setVerid(Integer.valueOf(verId));
                this.seReviewRecordDAO.save(seReview);
            }
        }
    }

    private String getSchemeStatu(String verId, List<PatchRequirementVersion> reqVers)
    {
        String result = "";
        for (PatchRequirementVersion v : reqVers)
        {
            if (v.getVerid() != null)
            {
                if (StringUtils.equals(v.getVerid() + "", verId))
                {
                    if (v.getSchemeReviewStatu() != null)
                    {
                        result = v.getSchemeReviewStatu() + "";
                    }
                    break;
                }
            }
        }
        return result;
    }

    private String getEleValue(Element e, String eleName)
    {
        if (e == null)
        {
            return "";
        }
        if (StringUtils.isEmpty(eleName))
        {
            return "";
        }
        String result = "";
        Element ele = (Element)e.selectSingleNode(eleName);
        if (ele != null)
        {
            result = ele.getTextTrim();
        }
        return result;
    }

    public List versionStatic()
        throws SQLException
    {
        List<VersionRequirementStatVO> result = new ArrayList<VersionRequirementStatVO>();
        List<Integer> versionLst = patchrequirementDAO.getVersionList();
        VersionRequirementStatVO vrsVO = null;
        for (Integer versionId : versionLst)
        {
            DirVersion dv = dirVersionDAO.findById(versionId);
            vrsVO = getVersionRequirementStatVO(dv);
            result.add(vrsVO);
        }

        return result;
    }

    public List versionStaticLastedThree()
        throws SQLException
    {
        List<VersionRequirementStatVO> result = new ArrayList<VersionRequirementStatVO>();
        List<Integer> versionLst = patchrequirementDAO.getVersionListLastedThree();
        VersionRequirementStatVO vrsVO = null;
        for (Integer versionId : versionLst)
        {
            DirVersion dv = dirVersionDAO.findById(versionId);
            vrsVO = getVersionRequirementStatVO(dv);
            result.add(vrsVO);
        }

        return result;
    }

    /**
     * 导出Excel
     * 
     * @return
     * @throws Exception
     */
    @SuppressWarnings({"unchecked"})
    public String getStatExportList(int loginUser, String baseDir)
        throws Exception
    {
        // String fileName
        String fileName = ExcelService.getPatchExcelFullName(loginUser, baseDir);

        List statResult = versionStatic();
        File f = new File(fileName);
        f.createNewFile();
        // 生成数据表
        writeStaticExcel(new FileOutputStream(f), statResult);

        return fileName;
    }

    private void writeStaticExcel(FileOutputStream os, List statResult)
        throws Exception
    {
        WritableWorkbook wwb = Workbook.createWorkbook(os);
        WritableSheet ws = wwb.createSheet("版本需求完成统计", 0);

        // 字体样式的设定
        WritableFont wfc = new WritableFont(WritableFont.ARIAL, 20, WritableFont.BOLD, false, UnderlineStyle.NO_UNDERLINE, jxl.format.Colour.BLACK);
        WritableCellFormat wcfFC = new WritableCellFormat(wfc);
        // 单元格背景色的设定
        wcfFC.setBackground(jxl.format.Colour.AQUA);
        // 列头的设定
        Label labelA = new Label(0, 0, "版本名称", wcfFC);
        ws.addCell(labelA);

        Label labelB = new Label(1, 0, "待裁决", wcfFC);
        ws.addCell(labelB);

        Label labelC = new Label(2, 0, "待规划", wcfFC);
        ws.addCell(labelC);

        Label lableD = new Label(3, 0, "已规划", wcfFC);
        ws.addCell(lableD);

        Label labelE = new Label(4, 0, "已发布", wcfFC);
        ws.addCell(labelE);

        // 数据的设定
        for (int i = 0; i < statResult.size(); i++)
        {
            VersionRequirementStatVO vrsVO = (VersionRequirementStatVO)statResult.get(i);
            // 版本名称
            Label label1 = new Label(0, i + 1, vrsVO.getVersionName());
            ws.addCell(label1);
            // 待裁决
            Label label2 = new Label(1, i + 1, String.valueOf(vrsVO.getToBeRuledNum()));
            ws.addCell(label2);

            // 待规划
            Label label3 = new Label(2, i + 1, String.valueOf(vrsVO.getToBePlanedNum()));
            ws.addCell(label3);

            // 已规划
            Label label4 = new Label(3, i + 1, String.valueOf(vrsVO.getPlanedNum()));
            ws.addCell(label4);

            // 已发布
            Label label5 = new Label(4, i + 1, String.valueOf(vrsVO.getReleasedNum()));
            ws.addCell(label5);
        }

        // 写入Exel工作表
        wwb.write();
        // 关闭Excel工作薄对象
        wwb.close();
    }

    private VersionRequirementStatVO getVersionRequirementStatVO(DirVersion dv)
        throws SQLException
    {
        VersionRequirementStatVO vo = new VersionRequirementStatVO();
        vo.setVersionName(dv.getName());
        vo.setToBeRuledNum(patchrequirementDAO.getRequirementStaticNum(dv.getId(), TO_BE_RULED_TYPE));
        vo.setToBePlanedNum(patchrequirementDAO.getRequirementStaticNum(dv.getId(), TO_BE_PLANED_TYPE));
        vo.setPlanedNum(patchrequirementDAO.getRequirementStaticNum(dv.getId(), PLANED_TYPE));
        vo.setReleasedNum(patchrequirementDAO.getRequirementStaticNum(dv.getId(), RELEASED_TYPE));
        return vo;
    }

    public void newPatchSave(Patch patch)
    {
        try
        {
            // 先保存补丁的基本信息数据到本数据库中，
            this.patchDAO.save(patch);

            // 再保存数据到vrp-lmt库中
            String productName = this.productDAO.getNameById(patch.getProduct());
            Integer productId = this.vrpLmtDAO.getProductIdByName(productName);
            if (productId != null)
            {

                java.sql.Date date = null;
                if (patch.getReleaseTime() != null)
                {
                    date = new java.sql.Date(patch.getReleaseTime().getTime());
                }
                this.vrpLmtDAO.savePatchVersion(productId, patch.getPatchVersion(), patch.getPatchVersionBrief(), date);
            }
        }
        catch (Exception e)
        {
            log.error("e", e);
            throw new RuntimeException(e);
        }
    }

    public void newPatchPlanSave(PatchPlan patchPlan)
    {
        try
        {
            // 保存补丁计划的基本信息数据到本数据库中，
            this.patchPlanDAO.save(patchPlan);

        }
        catch (Exception e)
        {
            log.error("e", e);
            throw new RuntimeException(e);
        }
    }

    public PatchDAO getPatchDAO()
    {
        return patchDAO;
    }

    public void setPatchDAO(PatchDAO patchDAO)
    {
        this.patchDAO = patchDAO;
    }

    public PatchPlanDAO getPatchPlanDAO()
    {
        return patchPlanDAO;
    }

    public void setPatchPlanDAO(PatchPlanDAO patchPlanDAO)
    {
        this.patchPlanDAO = patchPlanDAO;
    }

    public DirPatchreleasetypeDAO getDirPatchreleasetypeDAO()
    {
        return dirPatchreleasetypeDAO;
    }

    public void setDirPatchreleasetypeDAO(DirPatchreleasetypeDAO dirPatchreleasetypeDAO)
    {
        this.dirPatchreleasetypeDAO = dirPatchreleasetypeDAO;
    }

    public ProductDAO getProductDAO()
    {
        return productDAO;
    }

    public void setProductDAO(ProductDAO productDAO)
    {
        this.productDAO = productDAO;
    }

    public UserDAO getUserDAO()
    {
        return userDAO;
    }

    public void setUserDAO(UserDAO userDAO)
    {
        this.userDAO = userDAO;
    }

    public DirPatchstatusDAO getDirPatchstatusDAO()
    {
        return dirPatchstatusDAO;
    }

    public void setDirPatchstatusDAO(DirPatchstatusDAO dirPatchstatusDAO)
    {
        this.dirPatchstatusDAO = dirPatchstatusDAO;
    }

    public DirVersionDAO getDirVersionDAO()
    {
        return dirVersionDAO;
    }

    public void setDirVersionDAO(DirVersionDAO dirVersionDAO)
    {
        this.dirVersionDAO = dirVersionDAO;
    }

    public PatchrequirementDAO getPatchrequirementDAO()
    {
        return patchrequirementDAO;
    }

    public void setPatchrequirementDAO(PatchrequirementDAO patchrequirementDAO)
    {
        this.patchrequirementDAO = patchrequirementDAO;
    }

    public DirPatchdecisionDAO getDirPatchdecisionDAO()
    {
        return dirPatchdecisionDAO;
    }

    public void setDirPatchdecisionDAO(DirPatchdecisionDAO dirPatchdecisionDAO)
    {
        this.dirPatchdecisionDAO = dirPatchdecisionDAO;
    }

    public DefectDAO getDefectDAO()
    {
        return defectDAO;
    }

    public void setDefectDAO(DefectDAO defectDAO)
    {
        this.defectDAO = defectDAO;
    }

    public DirDepartmentDAO getDirDepartmentDAO()
    {
        return dirDepartmentDAO;
    }

    public void setDirDepartmentDAO(DirDepartmentDAO dirDepartmentDAO)
    {
        this.dirDepartmentDAO = dirDepartmentDAO;
    }

    public SiteDAO getSiteDAO()
    {
        return siteDAO;
    }

    public void setSiteDAO(SiteDAO siteDAO)
    {
        this.siteDAO = siteDAO;
    }

    public DirStatusDAO getDirStatusDAO()
    {
        return dirStatusDAO;
    }

    public void setDirStatusDAO(DirStatusDAO dirStatusDAO)
    {
        this.dirStatusDAO = dirStatusDAO;
    }

    public ParametersDAO getParametersDAO()
    {
        return parametersDAO;
    }

    public void setParametersDAO(ParametersDAO parametersDAO)
    {
        this.parametersDAO = parametersDAO;
    }

    /**
     * @return patchMeasureHistoryDAO
     */
    public PatchMeasureHistoryDAO getPatchMeasureHistoryDAO()
    {
        return patchMeasureHistoryDAO;
    }

    /**
     * @param patchMeasureHistoryDAO patchMeasureHistoryDAO
     */
    public void setPatchMeasureHistoryDAO(PatchMeasureHistoryDAO patchMeasureHistoryDAO)
    {
        this.patchMeasureHistoryDAO = patchMeasureHistoryDAO;
    }

    public PatchRequirementDefectSourceDAO getPatchRequirementDefectSourceDAO()
    {
        return patchRequirementDefectSourceDAO;
    }

    public void setPatchRequirementDefectSourceDAO(PatchRequirementDefectSourceDAO patchRequirementDefectSourceDAO)
    {
        this.patchRequirementDefectSourceDAO = patchRequirementDefectSourceDAO;
    }

    /**
     * @param patchVersions
     * @return
     * @throws SQLException
     * @throws ParseException
     */
    public PatchMeasureHistory getPatchStatistics(String patchVersion, String measureDate)
        throws SQLException, ParseException
    {
        Map<String, Integer> patchStatistics = patchrequirementDAO.getPatchStatistics(patchVersion);
        PatchMeasureHistory patchMeasureHistory = getPMHFormMap(patchStatistics);

        if (patchMeasureHistory != null)
        {
            patchMeasureHistory.setPatchVersion(patchVersion);
            patchMeasureHistory.setMeasureDate(measureDate);
            patchMeasureHistory.setCreateTime(new Date());
            patchMeasureHistoryDAO.save(patchMeasureHistory);
        }

        return patchMeasureHistory;
    }

    /**
     * @return
     * @throws SQLException
     */
    public List<String> getPatchVersions()
        throws SQLException
    {
        return patchDAO.getPatchVersions();
    }

    public List<PatchMeasureHistory> getHistoryList()
    {
        List<PatchMeasureHistory> result = patchMeasureHistoryDAO.findAll();
        // 2013.7.11 应王鹏63006 要求，BGP 和 MPLS&MCAST 合并成 BGP&MPLS&MCAST，IGP/SSP改成IGP/SSP/网络监控显示
        for (PatchMeasureHistory patchMeasureHistory : result)
        {
            if (patchMeasureHistory.getDeptMPLS() != null)
            {
                if (patchMeasureHistory.getDeptBGP() != null)
                {
                    patchMeasureHistory.setDeptBGP(patchMeasureHistory.getDeptBGP() + patchMeasureHistory.getDeptMPLS());
                }
                else
                {
                    patchMeasureHistory.setDeptBGP(patchMeasureHistory.getDeptMPLS());
                }
            }
        }

        return result;
    }

    /**
     * @param id
     */
    public void deletePatchMeasureHistory(String id)
    {
        if ((id != null) && !"".equals(id))
        {
            PatchMeasureHistory patchMeasureHistory = patchMeasureHistoryDAO.findById(Integer.valueOf(id));
            patchMeasureHistoryDAO.delete(patchMeasureHistory);
        }
    }

    private PatchMeasureHistory getPMHFormMap(Map<String, Integer> patchStatistics)
    {
        if (patchStatistics != null)
        {
            PatchMeasureHistory patchMeasureHistory = new PatchMeasureHistory();

            patchMeasureHistory.setClassA(getInt(patchStatistics.get("A")));
            patchMeasureHistory.setClassB(getInt(patchStatistics.get("B")));
            patchMeasureHistory.setClassC(getInt(patchStatistics.get("C")));
            if (patchStatistics.containsKey("BGP_MPLS_MCAST"))
            {
                patchMeasureHistory.setDeptBGP(getInt(patchStatistics.get("BGP")) + getInt(patchStatistics.get("BGP_MPLS_MCAST")) + getInt(patchStatistics.get("MPLS_MCAST")));
            }
            else
            {
                patchMeasureHistory.setDeptBGP(getInt(patchStatistics.get("BGP")) + getInt(patchStatistics.get("MPLS_MCAST")));
            }
            // patchMeasureHistory.setDeptBGP(patchStatistics.get("BGP"));
            if (patchStatistics.containsKey("IGP_SSP_网络监控"))
            {
                patchMeasureHistory.setDeptIGP(getInt(patchStatistics.get("IGP_SSP")) + getInt(patchStatistics.get("IGP_SSP_网络监控")));
            }
            else
            {
                patchMeasureHistory.setDeptIGP(getInt(patchStatistics.get("IGP_SSP")));
            }

            patchMeasureHistory.setDeptL2(getInt(patchStatistics.get("L2")));
            // L3字段保存IR的值
            patchMeasureHistory.setDeptL3(getInt(patchStatistics.get("IR")));
            // DeptSMP字段保存SMP&协议栈的值
            patchMeasureHistory.setDeptSMP(getInt(patchStatistics.get("SMP_协议栈")));

            return patchMeasureHistory;
        }

        return null;
    }

    private int getInt(Object o)
    {
        if (o == null)
        {
            return 0;
        }
        else
        {
            return ((Integer)o).intValue();
        }
    }

    /**
     * @param loginUserId
     * @param baseDir
     * @return
     * @throws Exception
     */
    public String exportHistory(Integer loginUserId, String baseDir)
        throws Exception
    {
        // 文件名
        String fileName = ExcelService.getPMHExcelFullName(loginUserId, baseDir);

        // 生成数据表
        if (FileControl.mkFile(fileName))
        {
            File f = new File(fileName);
            writeExcel(f);
        }
        else
        {
            throw new Exception(fileName + "无法创建！");
        }

        // 返回结果
        return fileName;
    }

    private void writeExcel(File f)
        throws WriteException, IOException
    {
        WritableWorkbook wwb = null;
        try
        {
            wwb = Workbook.createWorkbook(f);
            if (wwb != null)
            {
                // 字体样式的设定
                WritableFont wfc = new WritableFont(WritableFont.TIMES, 16, WritableFont.BOLD, false, UnderlineStyle.NO_UNDERLINE, jxl.format.Colour.BLACK);
                WritableCellFormat titleCF = new WritableCellFormat(wfc);
                // 单元格背景色的设定
                titleCF.setBackground(jxl.format.Colour.AQUA);
                titleCF.setVerticalAlignment(VerticalAlignment.CENTRE);
                titleCF.setAlignment(Alignment.CENTRE);
                titleCF.setBorder(Border.ALL, BorderLineStyle.THIN);

                WritableCellFormat contentCF = new WritableCellFormat();
                contentCF.setBorder(Border.ALL, BorderLineStyle.THIN);

                int index = 0;
                WritableSheet patchMeasureSheet = wwb.createSheet("补丁度量", 0);
                patchMeasureSheet.addCell(new Label(index++, 0, "构建月份", titleCF));
                patchMeasureSheet.addCell(new Label(index++, 0, "补丁版本号", titleCF));
                patchMeasureSheet.addCell(new Label(index++, 0, "A类", titleCF));
                patchMeasureSheet.addCell(new Label(index++, 0, "B类", titleCF));
                patchMeasureSheet.addCell(new Label(index++, 0, "C类", titleCF));
                patchMeasureSheet.addCell(new Label(index++, 0, "BGP&MPLS&MCAST", titleCF));
                patchMeasureSheet.addCell(new Label(index++, 0, "IGP&SSP&网络监控", titleCF));
                patchMeasureSheet.addCell(new Label(index++, 0, "IR", titleCF));
                patchMeasureSheet.addCell(new Label(index++, 0, "SMP&协议栈", titleCF));
                patchMeasureSheet.addCell(new Label(index++, 0, "L2", titleCF));
                patchMeasureSheet.addCell(new Label(index++, 0, "小计", titleCF));

                List<PatchMeasureHistory> list = patchMeasureHistoryDAO.findHasOrder();

                if (list != null)
                {
                    for (int i = 0; i < list.size(); i++)
                    {
                        int j = 0;
                        PatchMeasureHistory patchMeasureHistory = list.get(i);
                        int total = getIntValue(patchMeasureHistory.getClassA()) + getIntValue(patchMeasureHistory.getClassB()) + getIntValue(patchMeasureHistory.getClassC());
                        patchMeasureSheet.addCell(new Label(j++, i + 1, patchMeasureHistory.getMeasureDate(), contentCF));
                        patchMeasureSheet.addCell(new Label(j++, i + 1, patchMeasureHistory.getPatchVersion(), contentCF));
                        patchMeasureSheet.addCell(new Number(j++, i + 1, getDoubleValue(patchMeasureHistory.getClassA()), contentCF));
                        patchMeasureSheet.addCell(new Number(j++, i + 1, getDoubleValue(patchMeasureHistory.getClassB()), contentCF));
                        patchMeasureSheet.addCell(new Number(j++, i + 1, getDoubleValue(patchMeasureHistory.getClassC()), contentCF));
                        patchMeasureSheet.addCell(new Number(j++, i + 1, getDoubleValue(patchMeasureHistory.getDeptBGP()), contentCF));
                        patchMeasureSheet.addCell(new Number(j++, i + 1, getDoubleValue(patchMeasureHistory.getDeptIGP()), contentCF));
                        patchMeasureSheet.addCell(new Number(j++, i + 1, getDoubleValue(patchMeasureHistory.getDeptL3()), contentCF));
                        patchMeasureSheet.addCell(new Number(j++, i + 1, getDoubleValue(patchMeasureHistory.getDeptSMP()), contentCF));
                        patchMeasureSheet.addCell(new Number(j++, i + 1, getDoubleValue(patchMeasureHistory.getDeptL2()), contentCF));
                        patchMeasureSheet.addCell(new Number(j++, i + 1, getDoubleValue(total), contentCF));
                    }
                }

                // 写入Excel工作表
                wwb.write();
            }
        }
        catch (Exception ex)
        {
            log.error("", ex);
        }
        finally
        {
            // 关闭Excel工作薄对象
            if (wwb != null)
            {
                wwb.close();
            }
        }
    }

    private int getIntValue(Integer value)
    {
        if (value == null)
        {
            return 0;
        }

        return value;
    }

    private Double getDoubleValue(Integer value)
    {
        if (value == null)
        {
            return Double.valueOf(0);
        }

        return Double.valueOf(value);
    }

    public List getDefectFromNewLib(Integer id)
    {
        List retList = new ArrayList();
        try
        {
            List<Integer> defectIds = this.patchDAO.getDefectIdsByReqId(id);
            if ((defectIds == null) || (defectIds.size() == 0))
            {
                return retList;
            }
            // 从vrp-lmt库中获取问题单的详细信息
            retList = this.vrpLmtDAO.getRemoteDefectInfoById(defectIds);
        }
        catch (Exception e)
        {
            log.error("", e);
        }
        return retList;
    }

    private List getRemoteDefectInfoById(List<Integer> defectIds, DataSource remoteDataSource)
        throws SQLException
    {
        List<DefectVO> result = new ArrayList<DefectVO>();
        if ((defectIds == null) || (defectIds.size() == 0))
        {
            return result;
        }
        StringBuilder ids = new StringBuilder();
        for (Integer id : defectIds)
        {
            ids.append(id + ",");
        }
        ids.subSequence(0, ids.lastIndexOf(","));

        String sql =
            "select d.id as id, d.gcrms as gcrms, d.title as title, v.name as vername, " + " expertUser.fullname as expertuser, analyUser.fullname as analyuser, "
                + " ds.name as status from ne_defect d, ne_user expertUser, ne_user analyUser, dir_version v, dir_status ds " + " where d.id in (" + ids.subSequence(0, ids.lastIndexOf(","))
                + ") and d.expertPerson = expertUser.user_id " + " and d.analysePerson = analyUser.user_id and d.version = v.id and d.status = ds.id ";

        PreparedStatement pstmt = null;
        ResultSet rs = null;
        Connection conn = null;
        try
        {
            conn = remoteDataSource.getConnection();
            pstmt = conn.prepareStatement(sql);
            rs = pstmt.executeQuery();

            while (rs.next())
            {
                DefectVO defectVO = new DefectVO();
                defectVO.setId(rs.getInt("id"));
                defectVO.setGcrms(rs.getString("gcrms"));
                defectVO.setTitle(rs.getString("title"));
                defectVO.setVersionName(rs.getString("vername"));
                defectVO.setExpertPersonName(rs.getString("expertuser"));
                defectVO.setAnalysePersonName(rs.getString("analyuser"));
                defectVO.setStatusName(rs.getString("status"));

                defectVO.setDefectSrc(2);
                result.add(defectVO);
            }

            return result;
        }
        catch (SQLException e)
        {
            log.error(e);
            throw e;
        }
        finally
        {
            rs.close();
            pstmt.close();
            conn.close();
        }
    }

    public void sendPatchRequirementSubmitMail(Integer id)
    {
        Patchrequirement requirement = this.patchrequirementDAO.findById(id);
        String requirmentLink = "http://vrplmt/patch/viewRequirement.action?id=" + id;
        List<User> mailToUser = new ArrayList<User>();
        User createUser = null;
        if (requirement.getModifier() != null)
        {
            User modifer = this.userDAO.findById(requirement.getModifier());
            if (modifer != null)
            {
                mailToUser.add(modifer);
            }
        }
        if (!StringUtils.isEmpty(requirement.getAttentionUser()))
        {
            List<User> attendUser = this.userDAO.getUsersByUserIdString(requirement.getAttentionUser());
            if (attendUser != null)
            {
                mailToUser.addAll(attendUser);
            }
        }
        if (requirement.getCreateUser() != null)
        {
            createUser = this.userDAO.findById(requirement.getCreateUser());
            if (createUser != null)
            {
                mailToUser.add(createUser);
            }
        }
        if (mailToUser.size() == 0)
        {
            return;
        }

        List<String> toUserList = new ArrayList<String>();
        for (User u : mailToUser)
        {
            toUserList.add(u.getUserName() + "@notesmail.huawei.com");
        }

        List<String> ccUserList = new ArrayList<String>();
        String ccUsers = WebConfigUtils.get("mailCCUserList");
        for (String str : ccUsers.split(","))
        {
            ccUserList.add(str + "@notesmail.huawei.com");
        }

        try
        {
            // 实例化MailSenderInfo类
            MailSenderInfo mailInfo = new MailSenderInfo();

            // 邮件发送者的地址
            mailInfo.setFromAddress("vrplmt@huawei.com");
            // 邮件主题
            mailInfo.setSubject("【VRP补丁库提醒您】" + createUser.getFullname() + "创建了补丁需求单,该需求单是从网上问题库的问题触发的,请关注");
            mailInfo.setToAddressList(toUserList);

            mailInfo.setCopyToAddress(ccUserList);

            StringBuilder emailBody = new StringBuilder();
            emailBody.append("<html><body style='font-family: Verdana, Arial, Helvetica, sans-serif;font-size:14px; line-height:24px; color:#666666;'><div style='margin-left:45px; width:1100px;'><br><span style='color:#666666;font-size:16px;font-weight:bold;'>");
            emailBody.append(createUser.getFullname() + "创建了补丁需求单")
                .append("<span style='color: green;'>")
                .append(requirement.getTitle())
                .append("</span>")
                .append("】是由网上问题触发的,请您关注")
                .append("</span></div><br><br>");
            emailBody.append("<div><table style='font-size:14px;'; width='90%';><tr><td width='30'></td><td width='80' align='right' style='border-top:4px solid #666666;'>");
            emailBody.append("需求名称：")
                .append("</td><td width='200' align='left' style='border-top:4px solid #666666;'>")
                .append(requirement.getTitle())
                .append("</td></tr><tr><td width='30'></td><td width='80' align='right' style='border-top:2px solid #EEEEEE;'>");
            emailBody.append("需求链接：")
                .append("</td><td width='200' align='left' style='border-top:2px solid #EEEEEE;'>")
                .append(requirmentLink)
                .append("</td></tr></table></div><br><br><br><div style='margin-left:45px;'><span style='color:#666666;'>");
            emailBody.append("这是一封系统邮件,请勿直接回复！").append("</span></div><br><div style='margin-left:45px;'><span style='color:#666666;'>");
            emailBody.append("感谢您的使用,欢迎您提出宝贵的意见和建议！").append("</span></div><br><div style='margin-left:45px;'><span style='color:#666666;'>");
            emailBody.append("VRP补丁管理平台" + "访问&nbsp; http://vrplmt &nbsp;&nbsp;&nbsp;版权所有@华为技术有限公司2013.保留一切权利").append("</div></body></html>");
            // 邮件的文本内容
            mailInfo.setContent(emailBody.toString());
            // 这个类主要来发送邮件
            SimpleMailSender sms = new SimpleMailSender();
            // 发送文体格式
            sms.sendHtmlMail(mailInfo);
        }
        catch (Exception e)
        {
            log.error("", e);
        }
    }

    public List<PatchStatisticResult> getPatchStatisticResult(Date patchStartTime, Date patchEndTime)
        throws Exception
    {
        List<PatchStatisticResult> result = new ArrayList<PatchStatisticResult>();
        List<Patch> patchList = this.patchDAO.findByTimeBetween(patchStartTime, patchEndTime);
        if ((patchList != null) && (patchList.size() > 0))
        {
            for (Patch p : patchList)
            {
                PatchStatisticResult statisticResult = new PatchStatisticResult();
                statisticResult.setPatchVersion(p.getPatchVersion());
                statisticResult.setCreateTime(p.getCreateTime());

                // 根据补丁id 查找 该补丁下挂了多少需求
                List<Patchrequirement> patchRequirements = this.patchrequirementDAO.findPatchReqByPatchId(p.getId());

                Map<String, Integer> departmentMap = new HashMap<String, Integer>();
                Map<String, Integer> typeMap = new HashMap<String, Integer>();
                // 遍历每个需求 确定该需求的所属部门 以及该需求的补丁类型
                for (Patchrequirement req : patchRequirements)
                {
                    String dep = req.getDepartmentStr();
                    if (StringUtils.isNotEmpty(dep))
                    {
                        Integer count = departmentMap.get(dep);
                        if (count != null)
                        {
                            departmentMap.put(dep, count + 1);
                        }
                        else
                        {
                            departmentMap.put(dep, 1);
                        }
                    }
                    // 确定补丁类型
                    List<String> patchTypes = this.patchDAO.getPatchTypeByReqIdAndPatch(req.getId(), p.getId());
                    for (String s : patchTypes)
                    {
                        Integer typeCount = typeMap.get(s);
                        if (typeCount != null)
                        {
                            typeMap.put(s, typeCount + 1);
                        }
                        else
                        {
                            typeMap.put(s, 1);
                        }
                    }
                }
                statisticResult.setPatchDepMap(departmentMap);
                statisticResult.setPatchTypeMap(typeMap);
                statisticResult.setCount(patchRequirements.size());
                result.add(statisticResult);
            }
        }
        return result;
    }

    private void writeContentToExcel(File f, List<PatchStatisticResult> patchStatisResult)
        throws Exception
    {
        WritableWorkbook wwb = null;
        try
        {
            wwb = Workbook.createWorkbook(f);
            if (wwb != null)
            {
                // 字体样式的设定
                WritableFont wfc = new WritableFont(WritableFont.TIMES, 16, WritableFont.BOLD, false, UnderlineStyle.NO_UNDERLINE, jxl.format.Colour.BLACK);
                WritableCellFormat titleCF = new WritableCellFormat(wfc);
                // 单元格背景色的设定
                titleCF.setBackground(jxl.format.Colour.AQUA);
                titleCF.setVerticalAlignment(VerticalAlignment.CENTRE);
                titleCF.setAlignment(Alignment.CENTRE);
                titleCF.setBorder(Border.ALL, BorderLineStyle.THIN);

                WritableCellFormat contentCF = new WritableCellFormat();
                contentCF.setBorder(Border.ALL, BorderLineStyle.THIN);

                int index = 0;
                WritableSheet patchMeasureSheet = wwb.createSheet("补丁度量", 0);
                patchMeasureSheet.addCell(new Label(index++, 0, "构建月份", titleCF));
                patchMeasureSheet.addCell(new Label(index++, 0, "补丁版本号", titleCF));
                patchMeasureSheet.addCell(new Label(index++, 0, "A类", titleCF));
                patchMeasureSheet.addCell(new Label(index++, 0, "B类", titleCF));
                patchMeasureSheet.addCell(new Label(index++, 0, "C类", titleCF));
                patchMeasureSheet.addCell(new Label(index++, 0, "BGP", titleCF));
                patchMeasureSheet.addCell(new Label(index++, 0, "MPLS&MCAST", titleCF));
                patchMeasureSheet.addCell(new Label(index++, 0, "IGP&SSP&网络监控", titleCF));
                patchMeasureSheet.addCell(new Label(index++, 0, "IR", titleCF));
                patchMeasureSheet.addCell(new Label(index++, 0, "SMP&协议栈", titleCF));
                patchMeasureSheet.addCell(new Label(index++, 0, "L2", titleCF));
                patchMeasureSheet.addCell(new Label(index++, 0, "系统服务开发部", titleCF));
                patchMeasureSheet.addCell(new Label(index++, 0, "小计", titleCF));

                SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM");

                if (patchStatisResult != null)
                {
                    for (int i = 0; i < patchStatisResult.size(); i++)
                    {
                        int j = 0;
                        PatchStatisticResult result = patchStatisResult.get(i);

                        patchMeasureSheet.addCell(new Label(j++, i + 1, sdf.format(result.getCreateTime()), contentCF));
                        patchMeasureSheet.addCell(new Label(j++, i + 1, result.getPatchVersion(), contentCF));

                        Integer temp = 0;
                        if (result.getPatchTypeMap().get("A") != null)
                        {
                            temp = result.getPatchTypeMap().get("A");
                        }
                        patchMeasureSheet.addCell(new Number(j++, i + 1, getDoubleValue(temp), contentCF));

                        temp = 0;
                        if (result.getPatchTypeMap().get("B") != null)
                        {
                            temp = result.getPatchTypeMap().get("B");
                        }
                        patchMeasureSheet.addCell(new Number(j++, i + 1, getDoubleValue(temp), contentCF));

                        temp = 0;
                        if (result.getPatchTypeMap().get("C") != null)
                        {
                            temp = result.getPatchTypeMap().get("C");
                        }
                        patchMeasureSheet.addCell(new Number(j++, i + 1, getDoubleValue(temp), contentCF));

                        temp = 0;
                        if (result.getPatchDepMap().get("BGP") != null)
                        {
                            temp = result.getPatchDepMap().get("BGP");
                        }
                        patchMeasureSheet.addCell(new Number(j++, i + 1, getDoubleValue(temp), contentCF));

                        temp = 0;
                        if (result.getPatchDepMap().get("MPLS&MCAST") != null)
                        {
                            temp = result.getPatchDepMap().get("MPLS&MCAST");
                        }
                        patchMeasureSheet.addCell(new Number(j++, i + 1, getDoubleValue(temp), contentCF));

                        temp = 0;
                        if (result.getPatchDepMap().get("IGP&SSP") != null)
                        {
                            temp = result.getPatchDepMap().get("IGP&SSP");
                        }
                        patchMeasureSheet.addCell(new Number(j++, i + 1, getDoubleValue(temp), contentCF));

                        temp = 0;
                        if (result.getPatchDepMap().get("IR") != null)
                        {
                            temp = result.getPatchDepMap().get("IR");
                        }
                        patchMeasureSheet.addCell(new Number(j++, i + 1, getDoubleValue(temp), contentCF));

                        temp = 0;
                        if (result.getPatchDepMap().get("SMP&协议栈") != null)
                        {
                            temp = result.getPatchDepMap().get("SMP&协议栈");
                        }
                        patchMeasureSheet.addCell(new Number(j++, i + 1, getDoubleValue(temp), contentCF));

                        temp = 0;
                        if (result.getPatchDepMap().get("L2") != null)
                        {
                            temp = result.getPatchDepMap().get("L2");
                        }
                        patchMeasureSheet.addCell(new Number(j++, i + 1, getDoubleValue(temp), contentCF));

                        temp = 0;
                        if (result.getPatchDepMap().get("系统服务开发部") != null)
                        {
                            temp = result.getPatchDepMap().get("系统服务开发部");
                        }
                        patchMeasureSheet.addCell(new Number(j++, i + 1, getDoubleValue(temp), contentCF));

                        temp = 0;
                        if (result.getCount() != null)
                        {
                            temp = result.getCount();
                        }
                        patchMeasureSheet.addCell(new Number(j++, i + 1, getDoubleValue(temp), contentCF));
                    }
                }
                // 写入Excel工作表
                wwb.write();
            }
        }
        catch (Exception ex)
        {
            log.error("", ex);
        }
        finally
        {
            // 关闭Excel工作薄对象
            if (wwb != null)
            {
                wwb.close();
            }
        }
    }

    public String exportPatchStatistic(Date patchStartTime, Date patchEndTime, Integer loginUserId, String baseDir)
        throws Exception
    {
        List<PatchStatisticResult> patchStatisResult = getPatchStatisticResult(patchStartTime, patchEndTime);

        // 文件名
        String fileName = ExcelService.getPMHExcelFullName(loginUserId, baseDir);
        // 生成数据表
        if (FileControl.mkFile(fileName))
        {
            File f = new File(fileName);
            writeContentToExcel(f, patchStatisResult);
        }
        else
        {
            throw new Exception(fileName + "无法创建！");
        }
        // 返回结果
        return fileName;

    }

    public Map<String, String> getFeatureListByDepartmentId(String departmentId)
    {
        Map<String, String> result = new HashMap<String, String>();
        try
        {
            result.put("", "--请选择--");
            if ((departmentId == null) || "".equals(departmentId))
            {
                return result;
            }
            Integer department = Integer.valueOf(departmentId);

            DirDepartment dep = this.dirDepartmentDAO.findById(department);
            if (dep == null)
            {
                return result;
            }
            // 根据部门名称获取该部门下的所有的特性名称
            List<String> featureNameList = this.productDAO.getFeatureListByDepartmentName(dep.getName());
            if (featureNameList.size() > 0)
            {
                result.clear();
                for (String s : featureNameList)
                {
                    result.put(s, s);
                }
            }
        }
        catch (Exception e)
        {
            log.error("", e);
        }
        return result;
    }

    private Query searchPatchQuery(Patch searchParam)
    {

        StringBuilder sql = new StringBuilder();
        sql.append(" from Patch p where 1 = 1 ");
        if ((searchParam.getStatus() != null) && (searchParam.getStatus() != 0))
        {
            sql.append(" and p.status = ").append(searchParam.getStatus());
        }

        if ((searchParam.getProduct() != null) && (searchParam.getProduct() != 0))
        {
            sql.append(" and p.product = ").append(searchParam.getProduct());
        }

        if (StringUtils.isNotEmpty(searchParam.getPatchVersion()))
        {
            sql.append(" and p.patchVersion like '%").append(searchParam.getPatchVersion()).append("%' ");
        }

        sql.append(" order by p.id desc ");

        return this.patchDAO.createQuerySentence(sql.toString());
    }

    private String getNameByMap(Integer key, Map<Integer, String> map)
    {
        if (map.get(key) != null)
        {
            return map.get(key);
        }
        return "";
    }

    // 查询申请不合入需求开始
    @SuppressWarnings("unchecked")
    // 0606
    public List<PatchVO> searchUnRequirement(String patch, int pageSize, int pageNow, String orderBy, String orderSeq, boolean flag, String isputin)
        throws SQLException
    {
        List unRetList = new ArrayList();

        // 需要修改此接口，改为获取老数据
        // 0606
        List list = this.patchDAO.searchUnRequirement(patch, orderBy, orderSeq, flag, isputin);

        // 除此之外还要从新平台中获取数据 如果 qproduct 和 qVersion有数据的话，还要从新平台中获取数据
        List<PatchExVO> newRequirementList = this.patchDAO.searchUnRequirementWithoutVersion(patch, orderBy, orderSeq, flag, isputin);

        addNewRequirement(list, newRequirementList, null, null);

        // 如果等于false 则直接返回list 代表是不分页
        if (!flag)
        {
            if (list.size() < 1)
            {
                return null;
            }
            return list;
        }

        // 代表进行分页操作 由于不能使用数据库的分页操作，使用程序分页的方式进行分页处理
        // 在此处实现翻页的操作，不使用数据库的翻页操作 ，可能会造成性能的急剧下降
        if ((list != null) && (list.size() > 0))
        {
            for (int i = pageNow * pageSize - pageSize; i < pageNow * pageSize; i++)
            {
                if (i == list.size())
                {
                    break;
                }
                PatchVO patchVO = (PatchVO)list.get(i);
                updataPatchVO(patchVO);
                unRetList.add(patchVO);
            }
        }

        if (list.size() < 1)
        {
            unRetList = null;
        }
        return unRetList;
    }

    // /**
    // * 根据补丁的条件在库中搜索补丁信息
    // * @param searchParam
    // * @param index
    // * @param size
    // * @return
    // */
    // public PageRecord<Patch> searchPatchNew(Patch searchParam, Integer index, Integer size)
    // {
    // // TODO Auto-generated method stub
    // List<Patch> resultList = null;
    //
    // List<Product> productList = this.getProductDAO().findAllProducts();
    // Map<Integer, String> productMap = new HashMap<Integer, String>();
    // for (Product p : productList)
    // {
    // productMap.put(p.getProductId(), p.getProductName());
    // }
    //
    //
    //
    //
    //
    // Map<Integer, String> patchStatusMap = Constant.getPatchStatusMap();
    //
    // Query query = this.searchPatchQuery(searchParam);
    //
    // Integer amount = query.list().size();
    // query.setFirstResult((index - 1) * size);
    // query.setMaxResults(size);
    //
    // resultList = query.list();
    //
    //
    // for (Patch p : resultList)
    // {
    // p.setProductStr(getNameByMap(p.getProduct(), productMap));
    // p.setStatusStr(getNameByMap(p.getStatus(), patchStatusMap));
    // }
    //
    //
    //
    //
    // //设置查询参数
    // PageParameter<Patch> pageParameter = new PageParameter<Patch>();
    // pageParameter.setIndex(index);
    // pageParameter.setSize(size);
    //
    //
    // //设置查询的数量 和查询的结果
    // PageRecord<Patch> pageRecord = new PageRecord<Patch>(pageParameter);
    // //记录下查询总数量
    // pageRecord.setAmount(amount);
    // pageRecord.setRecords(resultList);
    // return pageRecord;
    //
    // }
    //
    // /**
    // * 更新补丁
    // * @param newPatch 更新后的补丁信息
    // * @param oldPatch 更新前的补丁信息
    // * @param operator 操作人
    // */
    // public void updatePatch(Patch newPatch, Patch oldPatch, User operator)
    // {
    // if (newPatch.getStatus().intValue() != newPatch.getStatus().intValue())
    // {
    // //如果状态发生了变更 需要发邮件通知
    //
    //
    // }
    //
    // if (StringUtils.isNotEmpty(newPatch.getPatchOwner()))
    // {
    // newPatch.setPatchOwner(this.getUserDAO().getUserIdStringByNameString(newPatch.getPatchOwner()));
    // }
    //
    // //更新补丁信息
    // this.patchDAO.saveOrUpdate(newPatch);
    //
    // //其中oldpatch为旧的补丁文件
    // // TODO Auto-generated method stub
    // }
    //
    //
    
    //1210new
    public String patchRequirementEditSave(String pid,String rid,String wordtype,String value) throws Exception{
    	if(wordtype.matches("conclusion.*")){

        	this.patchDAO.patchRequirementSave(pid,rid,wordtype.replace("Test", ""),value);

    	}else{

        	this.patchDAO.patchRequirementVersionSave(pid,rid,wordtype.replace("Test", ""),value);
    	}
    	
    	return "success";
    }
    
    public String requirementJudgeNotPutin(String reqid) throws Exception{
        this.patchDAO.requirementJudgeNotPutin(reqid);
    	return "";
    }
    
    //1210end
}
