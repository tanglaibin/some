https://blog.csdn.net/iqxtreme/article/details/49686399?%3E



1，通过js清空div中的内容
document.getElementById('BIGDraw').innerHTML = "";
$('#BIGDraw').html("");
例子：document.getElementById("b1").innerHTML = "<image alt='闭环责任人图表'src='<%=basePath%>problem/chart.action?value=1'>";


2，get parameter参数中文乱码
get方式提交的参数编码，只支持iso8859-1编码。
因此，如果里面有中文。
在后台就需要转换编码，如下
String zhongwen = request.getParameter("zhongwen");
zhongwen = new String(zhongwen.getBytes("iso8859-1"),"GBK");
前提是你页面编码就是GBK，如果是utf-8，那上面那句代码后面就改成utf-8。

https://www.guokr.com/post/637343/
https://www.zhihu.com/question/25712407
https://tieba.baidu.com/p/3415152295


3，css div背景透明设置
.div1{
width: 200px;
height: 30px;
background-color: gray;
filter:alpha(opacity=50);opacity:0.5;
}


4，window.location
function toIndex() {
	window.location.href = basePath + "main.jsp";
}


6，当页面加载完毕后执行方法
window.onload = function(){ } 【页面中所有内容加载完成才执行】


10,获取工程项目路径根目录  服务器路径
String path = request.getContextPath();
String basePath = request.getScheme() + "://"+ request.getServerName() + ":" + request.getServerPort()+ path + "/";
找到工程根目录名称，访问目录下的jsp页面——href="${pageContext.request.contextPath }/cn/Shared/ViewStart2.jsp"


13，获取上传的文件后缀名
var obj = document.getElementById("uploadFile");
var importEx = obj.value.substr(obj.value.lastIndexOf(".")).toLowerCase();


14，创建元素 填入值 赋予属性
var inputNode = document.createElement("input");
inputNode.value = "xxx";
inputNode.type = "text";
inputNode.readOnly = true;
$(inputNode).on('click',function(){
	changeColor(this);
	});

var brNode = document.createElement("br");
var spanNode = document.createElement("span");
nextNode.appendChild(spanNode);
var okNode = document.createElement("a");
okNode.innerText = "ok";
okNode.style.marginLeft = "40px";


15，map根据value取得key
for(Map.Entry entry:typemap.entrySet()){
	if(Ntname.equals(entry.getValue())){
		tid =  (int) entry.getKey();
			break;
		}}

16，div设置透明度
.div1{
background-color: gray;
filter:alpha(opacity=50);opacity:0.2;//透明度设置
z-index: 1;//显示层级设置  高于body上一层
}


17，jsp 页面动态引用
<jsp:include page="Layout.jsp" flush="false"/>

<jsp:include page="included.jsp" flush="true" />：动态INCLUDE在使用的时候，会先解析所要包含的页面，解析后在和主页面放到一起显示；
<%@ include file="included.htm" %> ：静态INCLUDE在使用的时候，不会解析所要包含的页面，也就是说，不管你的included.htm中有什么，我的任务就是把你包含并显示，其他的一概不管。

jsp:include是先编译一下included.jsp文件，然后再包含 先编译，后包含；
@ include是先把文件包含就来，然后统一编译 先包含，后编译。




19，字符串转换成Json对象
function stringToJson(data) {
      return eval("(" + data + ")");
    }	




21，访问工程路径写法
window.location="../en/Shared/ViewStart.jsp";	

	

23，后台返回jason  ajax拼接前台option展示数据
	$.ajax({
		type : "post",
		url : "../.././getTypeManage",
		dataType : "json",
		async: false,
		success : function(data) {
			var database = stringToJson(data);
			var htmlString = "";
			tobj = database.value;
			for (var index = 0; index < tobj.length; index++) {
	         htmlString += "<option value='" + tobj[index].tId + "'>" + tobj[index].tName + "</option>";
	           }
	        $("#pv_query_ec_type").html(htmlString);}
});	


24，读取package里的文件  找到对应路径下文件  并把文件转成流
InputStreamReader isr=null;
BufferedReader br = null;
isr = new InputStreamReader(getClass().getResourceAsStream("../sql/01.execute/insert_sql_list.txt"),"utf-8");
br = new BufferedReader(isr);
String str = "";
str=br.readLine()

public Connection getconnect(){
        try{
        	Properties property = new Properties();
        	property.load(new InputStreamReader(getClass().getResourceAsStream("../config/datasource.properties")));
        	String url = property.getProperty("datasource.url");
        	String username = property.getProperty("datasource.username");
        	String password = property.getProperty("datasource.password");
        	Class.forName("oracle.jdbc.OracleDriver");
		    conn = DriverManager.getConnection(url,username,password);
		}catch(Exception e)
		{
			e.printStackTrace();
		}
		return conn;
	}





25，oracle  根据sname  tid  求得sid
		sql = "select s_id from t_tools_eyc_type_stencil_cn where s_name = '"+Sname+"' and t_id = '"+tid+"'";
		pstem = conn.prepareStatement(sql);
	        ResultSet executeQuery = pstem.executeQuery();
		while (executeQuery.next()) {
		sid = executeQuery.getInt("s_id");
		}

26，Java poi处理excel
InputStream is= new FileInputStream(path);
	Workbook workbook = null;
	workbook = WorkbookFactory.create(is);
	int numberOfSheets = workbook.getNumberOfSheets();

workbook.getSheetName(index)

Sheet sheet = workbook.getSheet("单板信息");

Row row = sheet.getRow(rowNum);
Cell cell = row.getCell(cellNum);

int type = cell.getCellType();
switch (type) {
	case Cell.CELL_TYPE_NUMERIC:
	stringCellValue = (int)cell.getNumericCellValue();
	break;
	case Cell.CELL_TYPE_STRING:
	stringCellValue = cell.getStringCellValue();
	break;
	}
	
if (cell.toString().contains("ROUNDUP"))
FormulaEvaluator evaluator = workbook.getCreationHelper().createFormulaEvaluator();
CellValue evaluate = evaluator.evaluate(cell);
stringCellValue = (int)(evaluate.getNumberValue()*0.8);


27，按指定格式  求得当前日期
SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy年MM月dd日HH时mm分ss秒  ");
Calendar calendar = Calendar.getInstance();
Date date = new Date();
String endDate = "";
endDate= dateFormat.format(date);


28，占位符 拼接sql语句
sql = String.format("update t_tools_eyc_type_en set T_DELETE=0 where t_name='%s'",tname);
sql = String.format("insert into T_TOOLS_EYC_TYPE_CN values ('%s','%s','1')",Btid,Ntname);
pstem = conn.prepareStatement(sql);
pstem.executeQuery();
pstem.close();

29，js 参数传递 中文乱码
加密
var clarifyConclusion= encodeURI(encodeURI(ftr.cells[12].getElementsByTagName("input")[4].value));
解密
window.onload = function() {
       <%
       String ymclarifyConclusion = java.net.URLDecoder.decode(request.getParameter("clarifyConclusion"),"UTF-8").trim();
       %>
 }

30，input file 筛选显示文件类型

在上传文件的时候，需要限制指定的文件类型。
<input type="file" accept="image/*" />   
accept表示可以上传文件类型，image表示图片，*表示所有支持的格式。

*.3gpp	audio/3gpp, video/3gpp	3GPP Audio/Video
*.ac3	audio/ac3	AC3 Audio
*.asf	allpication/vnd.ms-asf	Advanced Streaming Format
*.au	audio/basic	AU Audio
*.css	text/css	Cascading Style Sheets
*.csv	text/csv	Comma Separated Values
*.doc	application/msword	MS Word Document
*.dot	application/msword	MS Word Template
*.dtd	application/xml-dtd	Document Type Definition
*.dwg	image/vnd.dwg	AutoCAD Drawing Database
*.dxf	image/vnd.dxf	AutoCAD Drawing Interchange Format
*.gif	image/gif	Graphic Interchange Format
*.htm	text/html	HyperText Markup Language
*.html	text/html	HyperText Markup Language
*.jp2	image/jp2	JPEG-2000
*.jpe	image/jpeg	JPEG
*.jpeg	image/jpeg	JPEG
*.jpg	image/jpeg	JPEG
*.js	text/javascript, application/javascript	JavaScript
*.json	application/json	JavaScript Object Notation
*.mp2	audio/mpeg, video/mpeg	MPEG Audio/Video Stream, Layer II
*.mp3	audio/mpeg	MPEG Audio Stream, Layer III
*.mp4	audio/mp4, video/mp4	MPEG-4 Audio/Video
*.mpeg	video/mpeg	MPEG Video Stream, Layer II
*.mpg	video/mpeg	MPEG Video Stream, Layer II
*.mpp	application/vnd.ms-project	MS Project Project
*.ogg	application/ogg, audio/ogg	Ogg Vorbis
*.pdf	application/pdf	Portable Document Format
*.png	image/png	Portable Network Graphics
*.pot	application/vnd.ms-powerpoint	MS PowerPoint Template
*.pps	application/vnd.ms-powerpoint	MS PowerPoint Slideshow
*.ppt	application/vnd.ms-powerpoint	MS PowerPoint Presentation
*.rtf	application/rtf, text/rtf	Rich Text Format
*.svf	image/vnd.svf	Simple Vector Format
*.tif	image/tiff	Tagged Image Format File
*.tiff	image/tiff	Tagged Image Format File
*.txt	text/plain	Plain Text
*.wdb	application/vnd.ms-works	MS Works Database
*.wps	application/vnd.ms-works	Works Text Document
*.xhtml	application/xhtml+xml	Extensible HyperText Markup Language
*.xlc	application/vnd.ms-excel	MS Excel Chart
*.xlm	application/vnd.ms-excel	MS Excel Macro
*.xls	application/vnd.ms-excel	MS Excel Spreadsheet
*.xlt	application/vnd.ms-excel	MS Excel Template
*.xlw	application/vnd.ms-excel	MS Excel Workspace
*.xml	text/xml, application/xml	Extensible Markup Language
*.zip	aplication/zip	Compressed Archive

今天写到上传文件功能时，涉及到文件类型的选择，mark一下，以便后续使用查找！
<input id="fileSelect" type="file" accept=".csv, application/vnd.openxmlformats-officedocument.spreadsheetml.sheet, application/vnd.ms-excel" />  

For CSV files (.csv), use: 
<input type="file" accept=".csv" />
For Excel Files 2003-2007 (.xls), use: 
<input type="file" accept="application/vnd.ms-excel" />
For Excel Files 2010 (.xlsx), use: 
<input type="file" accept="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet" />
For Text Files (.txt) use: 
<input type="file" accept="text/plain" />
For Image Files (.png/.jpg/etc), use: 
<input type="file" accept="image/*" />
For HTML Files (.htm,.html), use:
<input type="file" accept="text/html" />
For Video Files (.avi, .mpg, .mpeg, .mp4), use:
<input type="file" accept="video/*" />
For Audio Files (.mp3, .wav, etc), use:
<input type="file" accept="audio/*" />
For PDF Files, use:
<input type="file" accept=".pdf" /> 
DEMO:
http://jsfiddle.net/dirtyd77/LzLcZ/144/
NOTE:
If you are trying to display Excel CSV files (.csv), do NOT use:
text/csv
application/csv
text/comma-separated-values (works in Opera only).
If you are trying to display a particular file type (for example, a WAV or PDF), then this will almost always work...
<input type="file" accept=".FILETYPE" />






			目标：重在学习新的！————————————————其他可以放一放。——————————————————
			
			做再多，也没用。没有价值。
			
			springboot  feign  zuul  微服务
			spring  ioc  aop动态代理
			
			idea快捷键：
导入包 类：alt+enter
删除行：delete line
复制当前行：duplicate entire lines
格式化代码：ctrl+alt+L
			
			vue
			jquery
			hbase
			oracle
			
			mybatis
			hibernate
			struts2
			js
			html
			css
			mysql
			tomcat 调优
			数据库sql多表联查  sql调优  数据库调优
			io文件操作
			多线程
			正则表达式
			list  map 等集合
			jvm内存管理机制  jvm性能调优
			反射原理
			linux  常规命令  部署相关应用
			dom4j
			
			maven添加本地jar包：
			

			
			
			前后端面
			前台：
			
			



			js去除字符串空格？

			方法一：使用replace正则匹配的方法
			去除所有空格: str = str.replace(/\s*/g,"");      
			去除两头空格: str = str.replace(/^\s*|\s*$/g,"");
			去除左空格： str = str.replace( /^\s*/, “”);
			去除右空格： str = str.replace(/(\s*$)/g, "");

			str为要去除空格的字符串，实例如下：
			var str = " 23 23 ";
			var str2 = str.replace(/\s*/g,"");
			console.log(str2); // 2323
			方法二：使用str.trim()方法
			str.trim()局限性：无法去除中间的空格，实例如下：
			var str = "   xiao  ming   ";
			var str2 = str.trim();
			console.log(str2);   //xiao  ming 
			方法三：使用jquery,$.trim(str)方法
			$.trim(str)局限性：无法去除中间的空格，实例如下：


			get  post请求区别

			js 字符串操作函数
			我这里只是列举了常用的字符串函数，具体使用方法，请参考网址。

			concat() – 将两个或多个字符的文本组合起来，返回一个新的字符串。
			indexOf() – 返回字符串中一个子串第一处出现的索引。如果没有匹配项，返回 -1 。
			charAt() – 返回指定位置的字符。
			lastIndexOf() – 返回字符串中一个子串最后一处出现的索引，如果没有匹配项，返回 -1 。
			match() – 检查一个字符串是否匹配一个正则表达式。
			substr() 函数 -- 返回从string的startPos位置，长度为length的字符串
			substring() – 返回字符串的一个子串。传入参数是起始位置和结束位置。
			slice() – 提取字符串的一部分，并返回一个新字符串。
			replace() – 用来查找匹配一个正则表达式的字符串，然后使用新字符串代替匹配的字符串。
			search() – 执行一个正则表达式匹配查找。如果查找成功，返回字符串中匹配的索引值。否则返回 -1 。
			split() – 通过将字符串划分成子串，将一个字符串做成一个字符串数组。
			length – 返回字符串的长度，所谓字符串的长度是指其包含的字符的个数。
			toLowerCase() – 将整个字符串转成小写字母。
			toUpperCase() – 将整个字符串转成大写字母。


			怎样添加、移除、移动、复制、创建和查找节点？

			 1）创建新节点
			　　createDocumentFragment() //创建一个DOM片段
			　　createElement() //创建一个具体的元素
			　　createTextNode() //创建一个文本节点

			2）添加、移除、替换、插入
			　　appendChild() //添加
			　　removeChild() //移除
			　　replaceChild() //替换
			　　insertBefore() //插入

			3）查找
			　　getElementsByTagName() //通过标签名称
			　　getElementsByName() //通过元素的Name属性的值
			　　getElementById() //通过元素Id，唯一性






					编辑页面，弹出新页面，同时传递过去参数：
					function editVersion(ftr)
							{
								var iWidth = 600;
								var iHeight = 670;
								var iTop = (window.screen.availHeight - 30 - iHeight) / 2;
								var iLeft = (window.screen.availWidth - 10 - iWidth) / 2;
								
								var reqname = encodeURI(encodeURI(ftr.cells[0].innerText.replace(/(^\s*)/g,"")));
								var patchname = encodeURI(encodeURI(ftr.cells[3].innerText));
								var desc = encodeURI(encodeURI(ftr.cells[12].getElementsByTagName("input")[0].value));
								var isRisk= encodeURI(encodeURI(ftr.cells[10].getElementsByTagName("input")[0].value));
								var isConclusion= encodeURI(encodeURI(ftr.cells[12].getElementsByTagName("input")[2].value));
								
								
								var judgeConclusion = ftr.cells[12].getElementsByTagName("input")[3].value;
								
								var c = "";
								var hanTxt = "%";
								for(i = 0; i < judgeConclusion.length; i++){
									c = judgeConclusion.charAt(i);
									if(hanTxt.indexOf(c) != -1 ){
										/* 说明包含这个%符号 */
										judgeConclusion= encodeURI(encodeURI(ftr.cells[12].getElementsByTagName("input")[3].value));
										break;
									   }
									}
								
								//var clarifyConclusion= encodeURI(encodeURI(ftr.cells[12].getElementsByTagName("input")[4].value));
								var clarifyConclusion= ftr.cells[12].getElementsByTagName("input")[4].value;
								
								
								
								var seReviewComment= ftr.cells[12].getElementsByTagName("input")[1].value;
								var seReviewComment2= encodeURI(encodeURI(ftr.cells[12].getElementsByTagName("input")[1].value));
								var priority= encodeURI(encodeURI(ftr.cells[9].getElementsByTagName("input")[0].value));
								var deliverperson= encodeURI(encodeURI(ftr.cells[8].getElementsByTagName("input")[0].value)); 
								var verid = ftr.cells[0].getElementsByTagName("input")[1].value.replace(/(^\s*)/g,"");
								var status = ftr.cells[1].getElementsByTagName("input")[0].value;
								var schemeReviewStatu = ftr.cells[2].getElementsByTagName("input")[0].value;
								var patchid = ftr.cells[3].getElementsByTagName("input")[0].value;
								var verPatchType = ftr.cells[4].getElementsByTagName("input")[0].value;
								var question = ftr.cells[5].getElementsByTagName("input")[0].value;
								var haspromise = ftr.cells[6].getElementsByTagName("input")[0].value;
								var delivertime = ftr.cells[7].getElementsByTagName("input")[0].value;
								var modifier= encodeURI(encodeURI($("#hmodifier").val()));
								var reqId= ftr.cells[0].getElementsByTagName("input")[0].value;
								var isputin= ftr.cells[11].getElementsByTagName("input")[0].value;
								
								var chuanzhi="verid='"+verid+"'"+"&reqname='"+reqname+"'"+"&status='"+status+"'"+"&schemeReviewStatu='"+schemeReviewStatu+"'"+"&patchid='"+patchid+"'"+"&patchname='"+patchname+"'"+"&verPatchType='"+verPatchType+"'"+"&question='"+question+"'"+"&haspromise='"+haspromise+"'"+"&delivertime='"+delivertime+"'"+"&desc='"+desc+"'"+"&isRisk='"+isRisk+"'"+"&isConclusion='"+isConclusion+"'"+"&modifier='"+modifier+"'"+"&judgeConclusion='"+judgeConclusion+"'"+"&clarifyConclusion='"+clarifyConclusion+"'"+"&reqId='"+reqId+"'"+"&seReviewComment='"+seReviewComment+"'"+"&priority='"+priority+"'"+"&isputin='"+isputin+"'"+"&deliverperson='"+deliverperson+"'"; 
								var win = window.open("<%=request.getContextPath()%>/page/patch/editVersionTest.jsp?"+chuanzhi+"&rid="+<s:property value='id'/>, "选择修改问题存在版本", "width=" + iWidth + ", height=" + iHeight + ",top=" + iTop + ",left=" + iLeft + ",toolbar=no, menubar=no, scrollbars=no, resizable=no,location=no, status=no,alwaysRaised=yes,depended=yes");
								
							}
							
							window.onload = function() 
							{
								<%
								String ymdesc=java.net.URLDecoder.decode(request.getParameter("desc"),"UTF-8").trim();
								
								String ymclarifyConclusion = new String(request.getParameter("clarifyConclusion").getBytes("ISO8859_1"), "GBK");
								
								String ymmodifier = java.net.URLDecoder.decode(request.getParameter("modifier"),"UTF-8").trim();

								if(ymdesc!=null&&!"".equals(ymdesc)){
									ymdesc=ymdesc.trim();
									ymdesc=ymdesc.replace("\n","");
									ymdesc=ymdesc.replace("\r","");
								}

								String ymreqname=java.net.URLDecoder.decode(request.getParameter("reqname"),"UTF-8").trim();
								String ympatchname=java.net.URLDecoder.decode(request.getParameter("patchname"),"UTF-8").trim();
								String ympriority=java.net.URLDecoder.decode(request.getParameter("priority"),"UTF-8").trim();
								String ymisRisk=java.net.URLDecoder.decode(request.getParameter("isRisk"),"UTF-8").trim();
								
								String ymdeliverperson=java.net.URLDecoder.decode(request.getParameter("deliverperson"),"UTF-8").trim();
								
								String ymseReviewComment=new String(request.getParameter("seReviewComment").getBytes("ISO8859_1"), "GBK");
								String ymseReviewComment2=java.net.URLDecoder.decode(request.getParameter("seReviewComment"),"UTF-8").trim();
								
								String ymisConclusion=java.net.URLDecoder.decode(request.getParameter("isConclusion"),"UTF-8").trim();
							   
								String ymjudgeConclusion;
								String jd = request.getParameter("judgeConclusion");
								if(jd.contains("%")){
									ymjudgeConclusion = java.net.URLDecoder.decode(jd,"UTF-8").trim();
								}else{
									ymjudgeConclusion=new String(request.getParameter("judgeConclusion").getBytes("ISO8859_1"), "GBK");
								}
								%>
								
								oldData={'verid':<%=request.getParameter("verid")%>
										,'reqname':<%=ymreqname%>
										,'status':<%=request.getParameter("status")%>
										,'schemeReviewStatu':<%=request.getParameter("schemeReviewStatu")%>
										,'patchid':<%=request.getParameter("patchid")%>
										,'patchname':<%=ympatchname%>
										,'verPatchType':<%=request.getParameter("verPatchType")%>
										,'question':<%=request.getParameter("question")%>
										,'haspromise':<%=request.getParameter("haspromise")%>
										,'delivertime':<%=request.getParameter("delivertime")%>
										,'deliverperson':<%=ymdeliverperson%>
										,'desc':<%=ymdesc%>
										,'reqId':<%=request.getParameter("reqId")%>
										,'isRisk':<%=ymisRisk%>
										,'isConclusion':<%=ymisConclusion%>
										,'seReviewComment':<%=ymseReviewComment%>
										,'priority':<%=ympriority%>
										,'isConclusion':<%=ymisConclusion%>
										,'isputin':<%=request.getParameter("isputin")%>
										,'modifier':<%=ymmodifier%>
										,'judgeConclusion':<%=ymjudgeConclusion%>
										,'clarifyConclusion':<%=ymclarifyConclusion%>};
								initData();    
							}
							
							
							function initData()
							{
					//         	debugger;
								$("#trVerid").hide();    
								$("#verid").val(oldData.verid);
								$("#reqname").val(oldData.reqname);
								$("#status").val(oldData.status);      
								if (oldData.schemeReviewStatu == '' || oldData.schemeReviewStatu == 0)
								{
									$("#schemeReviewStatu").val(1);
								}      
								else
								{
									$("#schemeReviewStatu").val(oldData.schemeReviewStatu);               
								}
								
								if(oldData.priority == '' || oldData.priority == 0){
								 $("#priority").val("0");
								 $("#priorityvalue").val("0");
							   }else{
								 $("#priority").val(oldData.priority);  
								 $("#priorityvalue").val(oldData.priority);
							   }
								if(oldData.isRisk == '' || oldData.isRisk == 0){
									 $("#isRisk").val("0");
									 $("#isRiskvalue").val("0");
								  }else{
									 $("#isRisk").val(oldData.isRisk);  
									 $("#isRiskvalue").val(oldData.isRisk);
								  }
								
								if(oldData.isputin == '' || oldData.isputin == 0){
									 $("#isputin").val("0");
								}else{
									 $("#isputin").val(oldData.isputin);  
								}
								$("#patchid").val(oldData.patchid);
								$("#patchname").val(oldData.patchname);
								$("#question").val(oldData.question);

								$("#haspromise").val(oldData.haspromise);
								$("#delivertime").val(oldData.delivertime);
								//$("#deliverperson").val(oldData.deliverperson);
								//1210new
								if(oldData.deliverperson==null||oldData.deliverperson==""){
									$("#deliverperson").val(oldData.modifier);
									onEnter2('deliverperson');
								}else{
									$("#deliverperson").val(oldData.deliverperson);
									onEnter2('deliverperson');
								}
								//1210end
					  
								$("#desc").val(getEditStr(oldData.desc));   
								$("#isConclusion").val(getEditStr(oldData.isConclusion));
								$("#reqId").val(oldData.reqId);
								$("#seReviewComment").val(oldData.seReviewComment);
								$("#verPatchType").val(oldData.verPatchType);
								//1210new
								 $("#judgeConclusion").val(oldData.judgeConclusion);
								 $("#clarifyConclusion").val(oldData.clarifyConclusion);
								//1210end
								
								if($("#isputin").val() == "3" && $("#isputin").val() != "")
								{
									$("#judgeConclusionSpan").show();
									$("#judgeConclusionFont").show();
								}
								
								dispPatch();
							}
							
							
							
					vue 项目使用echarts js
					feign zuul springcloud  构建微服务  api暴露
					ctrl+E
					springboot
					idea
					swagger框架  生成api web页面
					springboot 新建项目 
							
							
	
					高并发
					分布式集群   flumn  lucence		cdh 			
					
					hdfs：数据存储
					mapreuce：数据分析
					hbase：数据库表 
							
							
					Flume的数据流由事件(Event)贯穿始终。
					事件是Flume的基本数据单位，它携带日志数据(字节数组形式)并且携带有头信息。
					Event由Agent外部的Source，比如上图中的WebServer生成。
					当Source捕获事件后会进行特定的格式化，然后Source会把事件推入(单个或多个)Channel中。
					可以把Channel看作是一个缓冲区，它将保存事件直到Sink处理完该事件。
					sink删除channel中的事件，把它放到外部的仓库中，比如HDFS，或者把它向前推送到下一个flume agent的flume source流。
					一个给定的agent中的Source和sink异步运行，同时events阶段性地存在channel里。		
							
							
					flume   spark					
							
							
							
							
					vo作为参数，加json解析：	
					/**
					 * 
					 * JSON解析
					 *
					 * @param json 客户端json串
					 * @return 参数bean
					 */
					public static YangVo fromString(final String json)
					{
						return JSON.parseObject(json, YangVo.class);
					}		
							
					public Response getOverviewData(@QueryParam("queryParams") YangVo yvo, @Context HttpServletRequest request)
						{}		
							
							
					vue导出领域  特性下xpath覆盖excel表格：
					vue安装导出组件——
					在src目录下创建一个文件(vendor)进入Blob.js和Export2Excel.js(此步骤已做过，直接安装下面三个命令即可)
					npm install -S file-saver 用来生成文件的web应用程序
					npm install -S xlsx 电子表格格式的解析器
					npm install -D script-loader 将js挂在在全局下
					
					
					import {export_json_to_excel} from '@/vendors/Export2Excel';
					
					exportYangData () {
						debugger
						if (this.pdu==''||this.pdu=='ALL'||this.version=='' || this.version==undefined ||this.version=='ALL') {
							this.$Message.error('请选择PDU和版本');
							return;
						}

						this.$refs.showDownload.show();
						axios.get('/rest/yangAnalysis/export',{
							params: {
								 queryParams:{
								pdu: this.pdu,
								productLine:'ENS',
								subsys:this.subsys,
								feature:this.feature,
								version:this.version, 
								product:this.product,
								source:this.source,
								testSource:this.testsource,
								 }
							},
						}).then((res) => {
							this.$refs.showDownload.hide();
							var tableHead = res.data.data.titleMap;
							var tableData = res.data.data.data;
							var formatData = tableData.map(v => tableHead.map(j => v[j]));
							export_json_to_excel(tableHead, formatData, "YangDataCovage" + Date.parse( new Date()));
						}).catch((error) =>{
							this.$refs.showDownload.hide();
							this.$Modal.error({
								title: "错误",
								content: "由于未知原因，导出数据失败"
							});
						});
					}

					@Path("export")
						@GET
						@Produces(MediaType.APPLICATION_JSON)
						public Response exportYangData(
								@QueryParam("queryParams") YangVo yvo,@Context HttpServletRequest request) {
							
							
							UseStat.stat(request, StatFunction.yangOverview);
							StoreResponseEntity entity = new StoreResponseEntity();
							
							if (yvo == null || !"ENS".equals(yvo.getProductLine()) 
									|| yvo.getPdu() == null || yvo.getVersion() == null) {
								entity.setSuccess(false);
								entity.setMessage("对不起，您当前查询条件的内容为空");
								return Response.ok(entity).build();
							}
							
							
							int total = yangService.getYangExportListTotal(yvo);
							yvo.setStartRow(0);
							yvo.setEndRow(total);
							
							List<YangPo> exportLog = yangService.getYangExportList(yvo);
							
							
							String[] titleList = { "PDU","版本","领域","特性", "xpath", "覆盖次数" };
							String[] titles = { "pdu","version","subsys","feature", "xpath", "yangCover2" };
							
							BasicTableVo basicTableVo = new BasicTableVo()
									.setTitleMap(titles)
									.setTitle(titleList)
									.setData(exportLog);
							
							entity.setSuccess(true);
							entity.setData(basicTableVo);
							return Response.ok(entity).build();
						}


					
						<select id="getyangExportList" resultType="com.huawei.kdd.omCoverageEvaluation.yang.povo.YangPo">
							select *
								from (select rownum r,
								y.pdu,
								y.version,
								y.xpath,
								y.subsys,
								y.feature,
								y.yangCover2
								from(select c.pdu,c.version,c.subsys,c.feature,c.xpath,count(d.guid) yangCover2 from
								  (select * from t_ens_yang_base b where 1=1
								  <if test="yvo.pdu != null and yvo.pdu != '' and yvo.pdu != 'ALL'">
									and b.pdu=#{yvo.pdu}
								</if>
								<if
									test="yvo.version != null and yvo.version != '' and yvo.version != 'ALL'">
									and b.version=#{yvo.version}
								</if>
								<if test="yvo.source != null and yvo.source != '' and yvo.source != 'ALL'">
									and b.source=#{yvo.source}
								</if>
								<if test="yvo.xpath != null and yvo.xpath != '' and yvo.xpath != 'ALL'">
									and b.xpath like '%${yvo.xpath}%'
								</if>
								<if
									test="yvo.feature != null and yvo.feature != '' and yvo.feature != 'ALL'">
									and b.feature=#{yvo.feature}
								</if>
								<if test="yvo.subsys != null and yvo.subsys != '' and yvo.subsys != 'ALL'">
									and b.subsys=#{yvo.subsys}
								</if>
									  ) c 
								  left join t_test_yang_match d on c.guid=d.yang_guid
									<if test="yvo.product != null and yvo.product != '' and yvo.product != 'ALL'">
										and d.product=#{yvo.product}
									</if>
									<if test="yvo.testSource != null and yvo.testSource != '' and yvo.testSource != 'ALL'">
										and d.source=#{yvo.testSource}
									</if>
								  group by c.guid,c.pdu,c.version,c.subsys,c.feature,c.xpath) y
									<![CDATA[
										where rownum <= #{yvo.endRow})
										where r > #{yvo.startRow}
									]]>
							
							</select>	
							
							
							
							
							java 一次性读取大文本内容  转成string
								String encoding = "UTF-8";
								Long filelength = file.length();
								byte[] filecontent = new byte[filelength.intValue()];
								try {
									FileInputStream in = new FileInputStream(file);
									in.read(filecontent);
									in.close();
								} catch (FileNotFoundException e) {
									e.printStackTrace();
								} catch (IOException e) {
									e.printStackTrace();
								}
								try {
									String yangContent =new String(filecontent, encoding);
								} catch (UnsupportedEncodingException e) {
									System.err.println("The OS does not support " + encoding);
									e.printStackTrace();
								}	
							
							
							
							
							python 安装第三方python库内容
							https://blog.csdn.net/u011878310/article/details/80420709
							
							
							
							
							
							
		some:


新的32为jdk1.8地址：C:\Program Files (x86)\Java\jdk1.8.0_191\bin
旧的64位jdk1.8：C:\jdk1.8\Java\jdk1.8.0_131

Program/BigData/FCollector/FCollector

GetCalculatorResult
GetLeftResult

CE-L16CQ-FG，CE-L08CQ-FG，CE-L48XS-FG1，CEL24LQED-E，CE-L48XS-FD，CE-L04CF-EF\MD\EC，CE-L36CQ-FG，CE-L36CQ-FD1，CE-L36CQ-SD



一边做把一些随时记录下来

some：

mib页面：vue  echarts  springmvc  mybatis-sql
微服务：springboot 模块:

Jackson 使用注解映射前端接收参数与JavaBean属性——
1.@JsonIgnoreProperties(ignoreUnknown = true): 忽略未知的属性，如果前端传一些不存在的属性，自动过滤掉
2.@JsonInclude(JsonInclude.Include.NON_NULL): 假如后端偷懒，直接向前端传PO或则把多个接口的VO用单个JavaBean实现，该注解的作用是只解析字段为不为null（也可为：NON_EMPTY，NON_DEFAULT等等）的属性，这样一些为空的属性就不会被解析传到前端
3.@JsonProperty("case_name")：映射前后端参数，前端传case_name，后端解析成caseName,后端传数据前会把caseName解析为case_name再传给前端

@JsonIgnoreProperties(ignoreUnknown = true)
@JsonInclude(JsonInclude.Include.NON_NULL)
public class CoverageMibpo implements Serializable {

@JsonProperty("max_access")
private String maxAccess;

为保证双向传递，需要自定义处理嵌入SpringMVC

swagger2 ：扫描定义的controller包，页面展示测试微服务接口；  
controller类接口自动化测试：

@RunWith(SpringRunner.class)
@SpringBootTest
@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class AlarmOverviewControllerTest {

    private static final Logger LOGGER = LoggerFactory.getLogger(AlarmOverviewControllerTest.class);
    private MockMvc mockMvc;

    /**
     * web项目上下文
     */
    @Autowired
    private WebApplicationContext webApplicationContext;

    /**
     * 所有测试方法执行之前执行该方法
     */
    @Before
    public void before() {
        //获取mockmvc对象实例
        mockMvc = MockMvcBuilders.webAppContextSetup(webApplicationContext).build();
    }

    /**
     * 根据返回的Json串转成Map
     *
     * @param response
     * @return
     * @throws Exception
     */
    private static Map jsonBodyToMap(MockHttpServletResponse response) throws Exception {
        byte[] bodyContent = null;
        Map map = null;
        ObjectMapper objectMapper = new ObjectMapper();
        bodyContent = response.getContentAsByteArray();
        map = objectMapper.readValue(bodyContent, Map.class);
        return map;
    }


    @Test
    public void getPDUList() throws Exception {
        String urlAll = "/alarmAnalysis/pdu?pdu=FW&productLine=ENS";
        testMvcResult(urlAll);
    }


    private void testMvcResult(String urlAll) throws Exception {
        MvcResult result = mockMvc.perform(MockMvcRequestBuilders.get(urlAll)
                .accept(MediaType.APPLICATION_JSON_UTF8))
                .andExpect(MockMvcResultMatchers.status().isOk())
                .andDo(MockMvcResultHandlers.print())
                .andReturn();
        LOGGER.info(result.getResponse().toString());
    }
}

yang文件（excel+chm解析）：
springboot  纯java项目  执行task——  

pom parent继承——
<parent>
	<groupId>org.springframework.boot</groupId>
	<artifactId>spring-boot-starter-parent</artifactId>
	<version>2.0.6.RELEASE</version>
	<relativePath/>
</parent>

task——
@Component
@Order(1)
public class TaskRunner implements ApplicationRunner {

    @Autowired
    YangService yangService;

    @Override
    public void run(ApplicationArguments args) throws Exception {

        String resultFilename = "result.txt";

        String apiName="CloudEngine 6810LI V200R005C00 NETCONF YANG API参考.chm";
        yangService.getApiData(apiName);
    }
}


获取项目根目录——
private String filePath = new File(".").getAbsolutePath();
ChmFile chmFile = new ChmFile(filePath + File.separator + "file" + File.separator + apiName);

带.号分隔——
String[] yangs = linkText.split("\\.yang");

反转字符  截取英文 截取到中文停止  -编码值——
String s1 = yangs[m];
s1 = new StringBuilder(s1).reverse().toString();
StringBuffer sbf = new StringBuffer();
char[] charArray = s1.toCharArray();
for (int n = 0; n < charArray.length; n++) {
	if ((charArray[n] >= 65) && (charArray[n] <= 122)) {
		sbf.append(charArray[n]);
	}else if(charArray[n] == 45){
		sbf.append(charArray[n]);
	}else if((charArray[n] >= 0x4e00) && (charArray[n] <= 0x9fbb)){
		break;
	}
}


dao——
@Mapper
public interface AlarmBaseMapper {

    @Select("select* from t_ens_alarm_base where pdu = #{pdu} and version = #{version}")
    @Results({
            @Result(property = "pdu", column = "pdu"),
            @Result(property = "version", column = "version"),
            @Result(property = "alarmId", column = "alarm_id"),
            @Result(property = "alarmType", column = "alarm_type")
    })
    List<Alarm> selectByPduVersion(@Param("pdu") String pdu, @Param("version")String version);

    @Select("select * from t_ens_alarm_base where alarm_id = #{alarm.alarmId} and pdu = #{alarm.pdu} and version = #{alarm.version}")
    int isAlarmExisted(@Param("alarm") Alarm alarm);

    @Insert("insert into " +
            "t_ens_alarm_base(" +
                "alarm_id," +
                "enname," +
                "cnname," +
                "module," +
                "alarm_type," +
                "createtime," +
                "pdu," +
                "version," +
                "feature" +
            ") " +
            "values(" +
                "#{alarm.alarmId}," +
                "#{alarm.enName}," +
                "#{alarm.cnName}," +
                "#{alarm.module}," +
                "#{alarm.alarmType}," +
                "#{alarm.createTime}," +
                "#{alarm.pdu}," +
                "#{alarm.version}," +
                "#{alarm.feature}" +
            ")")
    int insertAlarm(@Param("alarm") Alarm alarm);

    @Delete("delete from t_ens_alarm_base where pdu=#{alarm.pdu} and version = #{alarm.version} and alarm_id = #{alarm.alarmId}")
    int deleteAlarm(@Param("alarm") Alarm alarm);

}


@Mapper
public interface CmdBaseMapper {

    @Select("select* from t_ens_cli_base where pdu = #{pdu} and version = #{version} and product= #{product}")
    @Results({
            @Result(property = "pdu", column = "pdu"),
            @Result(property = "version", column = "version"),
            @Result(property = "product", column = "product"),
            @Result(property = "guid", column = "guid"),
            @Result(property = "cmdIndex", column = "cmd_index"),
            @Result(property = "mid", column = "mid")
    })
    List<Cmd> selectByPduVersion(@Param("pdu") String pdu, @Param("version") String version, @Param("product") String product);

    @Select("select distinct mid,feature,subsys from t_ens_cli_base where pdu = #{pdu} and version = #{version}")
    @Results({
            @Result(property = "pdu", column = "pdu"),
            @Result(property = "version", column = "version"),
            @Result(property = "product", column = "product"),
            @Result(property = "guid", column = "guid"),
            @Result(property = "feature", column = "feature"),
            @Result(property = "mid", column = "mid")
    })
    List<Cmd> selectByPduVersioNoProduct(@Param("pdu") String pdu, @Param("version") String version);

    @Update("update t_ens_cli_base " +
            "set mid = #{cmd.mid}" +
            "where " +
            "pdu=#{cmd.pdu} and " +
            "version=#{cmd.version} and " +
            "product=#{cmd.product} and " +
            "cmd_index=#{cmd.cmdIndex}")
    int updateCmd(@Param("cmd") Cmd cmd);

    @Update("update t_ens_cli_base " +
            "set vrp_flag = to_number(#{cmd.vrpFlag}) " +
            "where " +
            "pdu=#{cmd.pdu} and " +
            "version=#{cmd.version} and " +
            "product=#{cmd.product} and " +
            "guid=#{cmd.guid}")
    int updateCmdVrp(@Param("cmd") Cmd cmd);

    @Update("update t_ens_cli_base " +
            "set vrp_flag = to_number(#{cmd.vrpFlag}) " +
            "where " +
            "pdu=#{cmd.pdu} and " +
            "version=#{cmd.version} and " +
            "product=#{cmd.product} and " +
            "mid=#{cmd.mid}")
    int updateCmdVrpByMid(@Param("cmd") Cmd cmd);

    @Update("update t_ens_cli_base " +
            "set prod_care = to_number(#{cmd.prodCare}) " +
            "where " +
            "pdu=#{cmd.pdu} and " +
            "version=#{cmd.version} and " +
            "product=#{cmd.product} and " +
            "mid=#{cmd.mid}")
    int updateCmdProdCareByMid(@Param("cmd") Cmd cmd);

    @Update("update t_ens_cli_base " +
            "set prod_care = to_number(#{cmd.prodCare}) " +
            "where " +
            "pdu=#{cmd.pdu} and " +
            "version=#{cmd.version} and " +
            "mid=#{cmd.mid}")
    int updateCmdProdCareByMidNoProduct(@Param("cmd") Cmd cmd);
}


maven添加本地jar包   
mvn install:install-file -Dfile=C:\Users\twx580078\Desktop\jchmlib-0.5.4\jchmlib-master-0.5.4.jar -DgroupId=org.apache.jchmlib -DartifactId=jchmlib -Dversion=0.5.4 -Dpackaging=jar


gradle编译jar包   jchmlib


递归  
private void getYangG(ChmTopicsTree tree5, ChmFile chmFile, String yangfilename) {
	String title = tree5.title;
	String path = tree5.path;
	ChmUnitInfo chmUnitInfo = chmFile.resolveObject(path);
	String s = chmFile.retrieveObjectAsString(chmUnitInfo);
	Document doc = Jsoup.parse(s);
	Element body = doc.body();
	Elements links = body.getElementsByTag("td");
	if (links.size()>0){
		Element tbodyFirst = links.get(0);
		String operate = tbodyFirst.text();
		if ("get".equals(operate)){
			Element tbodySecond = links.get(1);
			//得到XPATH
			String xPathText = tbodySecond.text();
			//获得get方法请求示例内容
			Elements pres = body.getElementsByTag("pre");
			Element firstPre = pres.first();
			String firstPreText = firstPre.text();
			//存库 .yang  堆叠全局信息 get方法 XPATH 请求示例内容
			YangData yangData = new YangData();
			yangData.setYangFileName(yangfilename);
			yangData.setxPath(xPathText);
			yangData.setOperate(operate);
			yangData.setYangMethodName(title);
			yangData.setRequestContent(firstPreText);
			yangMapper.insertYangData(yangData);
		}
	}

	if (tree5.children.size()>0){
		LinkedList<ChmTopicsTree> children = tree5.children;
		for (int i=0;i<children.size();i++){
			ChmTopicsTree tree = children.get(i);
			getYangG(tree,chmFile,yangfilename);
		}
	}
}


log文件分析：大数据hardoop  linux  flume  spark等













































































					
							
							
							
							






















































